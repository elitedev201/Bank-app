{"version":3,"sources":["utils/theme.ts","utils/accessToken.ts","pages/Home.tsx","pages/Bye.tsx","generated/graphql.tsx","schemas /registerValidationSchema.ts","components/Forms/FormTextField.tsx","components/Alerts/AlertMessage.tsx","pages/Register/Register.style.ts","pages/Register/Register.tsx","schemas /loginValidationSchema.ts","pages/Login/Login.style.ts","pages/Login/Login.tsx","assets/world.svg","assets/flag.svg","assets/uk.svg","utils/currencies.ts","pages/Accounts/styles/Account.style.ts","components/Dialog/Dialog.style.ts","components/Dialog/Dialog.tsx","components/Typography/Title.tsx","components/Loading/Loading.style.ts","components/Loading/Loading.tsx","components/Cards/styles/TransactionCard.style.ts","components/Cards/TransactionCard.tsx","pages/Accounts/Transactions/Transactions.tsx","schemas /addMoneyValidationSchema.ts","pages/Accounts/Account.tsx","components/Toolbar/Toolbar.style.ts","components/SideDrawer/DrawerToggleButton.style.ts","components/SideDrawer/DrawerToggleButton.tsx","components/Toolbar/Toolbar.tsx","components/SideDrawer/SideDrawer.style.ts","components/SideDrawer/SideDrawer.tsx","components/Backdrop/Backdrop.style.ts","components/Backdrop/Backdrop.tsx","schemas /changePasswordValidationSchema.ts","pages/Settings/Settings.tsx","components/Charts/Chart.style.ts","components/Charts/Chart.tsx","components/Cards/styles/AccountsCard.style.ts","components/Cards/AccountsCard.tsx","assets/mc_symbol.svg","components/Cards/styles/ApolloCard.style.ts","components/Cards/ApolloCard.tsx","pages/Dashboard/styles/Dashboard.style.ts","pages/Dashboard/Dashboard.tsx","Routes.tsx","index.tsx","App.tsx"],"names":["ColorScheme","accessToken","getAccessToken","setAccessToken","token","theme","createMuiTheme","palette","primary","main","PRIMARY","secondary","ORANGE","info","MAROON","contrastThreshold","tonalOffset","Home","style","height","backgroundColor","marginTop","position","top","left","transform","color","WHITE","textTransform","letterSpacing","fontSize","fontWeight","Bye","margin","textAlign","href","textDecoration","SECONDARY","AccountDocument","gql","AccountsDocument","useAccountsQuery","baseOptions","ApolloReactHooks","AddMoneyDocument","CardsDocument","useCardsQuery","CreateAccountDocument","CreateCardDocument","CreateTransactionDocument","DeleteAccountDocument","DestroyAccountDocument","ExchangeDocument","LoginDocument","LogoutDocument","useLogoutMutation","MeDocument","useMeQuery","RegisterDocument","TransactionsDocument","useTransactionsQuery","UpdatePasswordDocument","registerValidationSchema","yup","firstName","required","lastName","email","streetAddres","postCode","city","country","password","value","min","confirmPassword","oneOf","dateOfBirth","FormTextField","placeholder","className","type","props","useField","field","meta","errorText","error","touched","ThemeProvider","TextField","variant","helperText","FormDatePicker","label","InputLabelProps","shrink","SuccessMessage","message","Alert","severity","WarningMessage","ErrorMessage","useRegisterStyles","makeStyles","root","width","headerText","alignedFormContent","display","alignedFormField","formField","formButton","loginText","margintop","spacer","Register","history","register","useState","errorMessage","setErrorMessage","classes","length","justifyContent","initialValues","validationSchema","onSubmit","data","a","setSubmitting","resetForm","variables","streetAddress","response","push","isSubmitting","onChange","name","Button","disabled","loginValidationSchema","useLoginStyles","registerText","Login","login","update","store","writeQuery","query","me","user","split","_extends","Object","assign","target","i","arguments","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","createElement","_ref8","_ref9","_ref10","_ref11","_ref12","_ref13","_ref14","_ref15","_ref16","_ref","svgRef","title","id","x","y","viewBox","enableBackground","xmlSpace","ref","fill","cx","cy","r","points","ForwardRef","forwardRef","d","Currency","useAccountStyles","accountBalance","accountInfo","alignItems","accountButtonsSection","accountButton","background","PRIMARY_HOVER","accountButtonSection","flexDirection","accountButtonText","transactions","transactionsHeader","transactionCards","dialogButton","useDialogStyles","createUseStyles","dialog","maxWidth","zIndex","padding","borderRadius","boxShadow","closeButton","outline","marginBottom","cursor","border","alignSelf","Dialog","children","isOpen","onClose","onClick","undefined","Title","Typography","useLoadingStyles","image","Loading","src","alt","useTransactionCardStyles","createStyles","expand","marginLeft","transition","transitions","create","duration","shortest","expandOpen","expandedText","avatar","TransactionCard","time","amount","card","transactionIcon","currencyIcon","expanded","setExpanded","Card","CardHeader","Avatar","aria-label","subheader","CardActions","IconButton","aria-expanded","Collapse","in","timeout","unmountOnExit","CardContent","borderBottom","Transactions","account","cardNumber","map","transaction","transactionType","Date","parse","date","toLocaleDateString","addMoneyValidationSchema","positive","integer","Account","svg","toAccountCurrency","setToAccountCurrency","setAccountBalance","openAddDialog","setOpenAddDialog","openExchangeDialog","setOpenExchangeDialog","openDetailsDialog","setOpenDetailsDialog","hasCard","setHasCard","setCardNumber","successMessage","setSuccessMessage","warningMessage","setWarningMessage","showLoadingIcon","setShowLoadingIcon","location","useLocation","useHistory","createTransaction","useAddMoneyMutation","addMoney","useExchangeMutation","exchange","useDeleteAccountMutation","deleteAccount","useAccountQuery","currency","state","accounts","cards","currencyFullText","useEffect","balance","simulate","refetchQueries","console","log","selectedAccountCurrency","FormControl","InputLabel","Select","labelId","event","filter","MenuItem","iban","bic","setTimeout","go","warning","renderDetailsDialog","right","e","preventDefault","useToolbarStyles","toolbar","navigation","logo","toggleButton","navigationItems","listStyle","navButton","HOVER","flex","useDrawerToggleButtonStyles","boxSizing","toggleButtonLine","DrawerToggleButton","click","Toolbar","logout","client","loading","showAuthUserButtons","setShowAuthUserButtons","drawerClickHandler","role","item","routeTo","then","resetStore","useSideDrawerStyles","siderDrawer","open","authUserNavigationItems","nonAuthUserNavigationItems","SideDrawer","showAuthUserNavigationItems","setShowAuthUserNavigationItems","drawerClasses","show","logOutClicked","useBackdropStyles","backdrop","Backdrop","changePasswordValidationSchema","oldPassword","newPassword","Settings","updatePassword","useDestroyAccountMutation","destroyAccount","openPersonalDetailsDialog","setOpenPersonalDetailsDialog","openAccountDetailsDialog","setOpenAccountDetailsDialog","openChangePasswordDialog","setOpenChangePasswordDialog","openAboutDialog","setOpenAboutDialog","userBirthDate","setUserBirthDate","List","component","ListItem","button","pathname","ListItemIcon","ListItemText","rel","useChartStyles","spending","Chart","bottom","strokeDasharray","dataKey","stroke","useAccountsCardStyles","useNoAccountsCardStyles","AccountsCard","fullCurrencyText","onAccountClicked","Divider","light","NoAccountsCard","onCreateNewAccountClicked","startIcon","useApolloCardStyles","cardTop","cardTypeIcon","cardValidThruLabel","opacity","cardCvvLabel","ApolloCard","validThru","cvv","NoApolloCard","onCreateNewCardClicked","useDashboardStyles","content","flexGrow","overflow","container","paddingTop","spacing","paddingBottom","paper","fixedHeight","accountCardHeight","chart","apolloCard","GLOBAL_CURRENCIES","Dashboard","createAccount","useCreateCardMutation","createCard","currencies","setCurrencies","analyticsAccount","setAnalyticsAccount","totalBalance","setTotalBalance","openDialog","setOpenDialog","accountCardHeightPaper","apolloCardPaper","chartPaper","forEach","Math","round","handleCreateNewCardClicked","c","determineCurrencyIcon","Container","Grid","xs","md","lg","Paper","EURO","DOLLAR","POUND","handleAccountClicked","expiresIn","getMonth","getFullYear","toString","substr","AuthenticatedRoute","Component","rest","render","to","LoggedInRoute","Routes","sideDrawerOpen","setSideDrawerOpen","Helmet","exact","path","cache","InMemoryCache","requestLink","ApolloLink","operation","forward","Observable","observer","handle","Promise","resolve","setContext","headers","authorization","subscribe","next","bind","complete","catch","unsubscribe","ApolloClient","link","from","TokenRefreshLink","accessTokenField","isTokenValidOrUndefined","exp","jwtDecode","now","fetchAccessToken","fetch","process","method","credentials","handleFetch","handleError","err","warn","onError","graphQLErrors","networkError","HttpLink","uri","ReactDOM","setLoading","res","json","document","getElementById"],"mappings":"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","file":"static/js/main.161267fe.chunk.js","sourcesContent":["import { createMuiTheme, Theme } from '@material-ui/core';\n\nexport enum ColorScheme {\n    PRIMARY = '#222B2D',\n    SECONDARY = '#29AABB',\n    ORANGE = '#F15742',\n    MAROON = '#432D32',\n    WHITE = '#FFFEF9',\n    HOVER = '#148C9C',\n    PRIMARY_HOVER = '#090c0c',\n}\n\n// For Material UI\nexport const theme: Theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: ColorScheme.PRIMARY,\n        },\n        secondary: {\n            main: ColorScheme.ORANGE,\n        },\n        info: {\n            main: ColorScheme.MAROON,\n        },\n        contrastThreshold: 3,\n        tonalOffset: 0.2,\n    },\n});\n","export let accessToken: string = '';\n\nexport const getAccessToken = (): string => {\n    return accessToken;\n};\n\nexport const setAccessToken = (token: string): void => {\n    accessToken = token;\n};\n","import React from 'react';\nimport { ColorScheme } from '../utils/theme';\n\ninterface Props {}\n\nexport const Home: React.FC<Props> = () => {\n    return (\n        <div style={{ height: '100vh', backgroundColor: ColorScheme.PRIMARY, marginTop: '-48px' }}>\n            <div\n                style={{\n                    position: 'absolute',\n                    top: '50%',\n                    left: '50%',\n                    transform: 'translate(-50%, -50%)',\n                }}\n            >\n                <div\n                    style={{\n                        color: ColorScheme.WHITE,\n                        textTransform: 'uppercase',\n                        letterSpacing: 10,\n                        fontSize: 64,\n                        fontWeight: 'bold',\n                    }}\n                >\n                    APOLLO\n                </div>\n                <div style={{ color: ColorScheme.WHITE, letterSpacing: 8 }}>Banking made easy.</div>\n            </div>\n        </div>\n    );\n};\n","import React from 'react';\nimport { ColorScheme } from '../utils/theme';\n\nexport const Bye: React.FC = () => {\n    return (\n        <>\n            <div style={{ margin: '0 auto', textAlign: 'center' }}>We're sad to see you go :(</div>\n            <div style={{ margin: '0 auto', textAlign: 'center' }}>\n                <p>\n                    Click{' '}\n                    <a href=\"/\" style={{ textDecoration: 'none', color: ColorScheme.SECONDARY }}>\n                        here\n                    </a>{' '}\n                    to return back to the home page\n                </p>\n            </div>\n        </>\n    );\n};\n","import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  DateTime: any,\n};\n\nexport type Account = {\n   __typename?: 'Account',\n  id: Scalars['Int'],\n  sortCode: Scalars['String'],\n  iban: Scalars['String'],\n  bic: Scalars['String'],\n  currency: Scalars['String'],\n  balance: Scalars['Float'],\n};\n\nexport type AccountResponse = {\n   __typename?: 'AccountResponse',\n  account: Account,\n  message: Scalars['String'],\n};\n\nexport type Card = {\n   __typename?: 'Card',\n  id: Scalars['Int'],\n  cardNumber: Scalars['String'],\n  pin: Scalars['Float'],\n  expiresIn: Scalars['DateTime'],\n  cvv: Scalars['Float'],\n  monthlySpendingLimit: Scalars['Float'],\n};\n\n\nexport type LoginResponse = {\n   __typename?: 'LoginResponse',\n  accessToken: Scalars['String'],\n  user: User,\n};\n\nexport type Mutation = {\n   __typename?: 'Mutation',\n  logout: Scalars['Boolean'],\n  revokeRefreshTokensForUser: Scalars['Boolean'],\n  login: LoginResponse,\n  register: Scalars['Boolean'],\n  updatePassword: Scalars['Boolean'],\n  destroyAccount: Scalars['Boolean'],\n  addMoney: AccountResponse,\n  exchange: AccountResponse,\n  createAccount: Scalars['Boolean'],\n  deleteAccount: Scalars['Boolean'],\n  createTransaction: Scalars['Float'],\n  createCard: Scalars['Boolean'],\n};\n\n\nexport type MutationRevokeRefreshTokensForUserArgs = {\n  userId: Scalars['Int']\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'],\n  email: Scalars['String']\n};\n\n\nexport type MutationRegisterArgs = {\n  country: Scalars['String'],\n  city: Scalars['String'],\n  postCode: Scalars['String'],\n  streetAddress: Scalars['String'],\n  dateOfBirth: Scalars['String'],\n  lastName: Scalars['String'],\n  firsName: Scalars['String'],\n  password: Scalars['String'],\n  email: Scalars['String']\n};\n\n\nexport type MutationUpdatePasswordArgs = {\n  newPassword: Scalars['String'],\n  oldPassword: Scalars['String']\n};\n\n\nexport type MutationAddMoneyArgs = {\n  currency: Scalars['String'],\n  amount: Scalars['Float']\n};\n\n\nexport type MutationExchangeArgs = {\n  amount: Scalars['Float'],\n  toAccountCurrency: Scalars['String'],\n  selectedAccountCurrency: Scalars['String']\n};\n\n\nexport type MutationCreateAccountArgs = {\n  currency: Scalars['String']\n};\n\n\nexport type MutationDeleteAccountArgs = {\n  currency: Scalars['String']\n};\n\n\nexport type MutationCreateTransactionArgs = {\n  currency: Scalars['String']\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  me?: Maybe<User>,\n  accounts: Array<Account>,\n  account: Account,\n  transactions: Array<Transaction>,\n  cards: Array<Card>,\n};\n\n\nexport type QueryAccountArgs = {\n  currency: Scalars['String']\n};\n\n\nexport type QueryTransactionsArgs = {\n  currency: Scalars['String']\n};\n\nexport type Transaction = {\n   __typename?: 'Transaction',\n  id: Scalars['Int'],\n  transactionType: Scalars['String'],\n  date: Scalars['DateTime'],\n  amount: Scalars['String'],\n};\n\nexport type User = {\n   __typename?: 'User',\n  id: Scalars['Int'],\n  email: Scalars['String'],\n  firstName: Scalars['String'],\n  lastName: Scalars['String'],\n  dateOfBirth: Scalars['String'],\n  streetAddress: Scalars['String'],\n  postCode: Scalars['String'],\n  city: Scalars['String'],\n  country: Scalars['String'],\n};\n\nexport type AccountQueryVariables = {\n  currency: Scalars['String']\n};\n\n\nexport type AccountQuery = (\n  { __typename?: 'Query' }\n  & { account: (\n    { __typename?: 'Account' }\n    & Pick<Account, 'id' | 'balance'>\n  ) }\n);\n\nexport type AccountsQueryVariables = {};\n\n\nexport type AccountsQuery = (\n  { __typename?: 'Query' }\n  & { accounts: Array<(\n    { __typename?: 'Account' }\n    & Pick<Account, 'id' | 'balance' | 'currency' | 'sortCode' | 'iban' | 'bic'>\n  )> }\n);\n\nexport type AddMoneyMutationVariables = {\n  amount: Scalars['Float'],\n  currency: Scalars['String']\n};\n\n\nexport type AddMoneyMutation = (\n  { __typename?: 'Mutation' }\n  & { addMoney: (\n    { __typename?: 'AccountResponse' }\n    & Pick<AccountResponse, 'message'>\n    & { account: (\n      { __typename?: 'Account' }\n      & Pick<Account, 'id' | 'balance'>\n    ) }\n  ) }\n);\n\nexport type CardsQueryVariables = {};\n\n\nexport type CardsQuery = (\n  { __typename?: 'Query' }\n  & { cards: Array<(\n    { __typename?: 'Card' }\n    & Pick<Card, 'id' | 'cardNumber' | 'pin' | 'expiresIn' | 'cvv' | 'monthlySpendingLimit'>\n  )> }\n);\n\nexport type CreateAccountMutationVariables = {\n  currency: Scalars['String']\n};\n\n\nexport type CreateAccountMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'createAccount'>\n);\n\nexport type CreateCardMutationVariables = {};\n\n\nexport type CreateCardMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'createCard'>\n);\n\nexport type CreateTransactionMutationVariables = {\n  currency: Scalars['String']\n};\n\n\nexport type CreateTransactionMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'createTransaction'>\n);\n\nexport type DeleteAccountMutationVariables = {\n  currency: Scalars['String']\n};\n\n\nexport type DeleteAccountMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteAccount'>\n);\n\nexport type DestroyAccountMutationVariables = {};\n\n\nexport type DestroyAccountMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'destroyAccount'>\n);\n\nexport type ExchangeMutationVariables = {\n  selectedAccountCurrency: Scalars['String'],\n  toAccountCurrency: Scalars['String'],\n  amount: Scalars['Float']\n};\n\n\nexport type ExchangeMutation = (\n  { __typename?: 'Mutation' }\n  & { exchange: (\n    { __typename?: 'AccountResponse' }\n    & Pick<AccountResponse, 'message'>\n    & { account: (\n      { __typename?: 'Account' }\n      & Pick<Account, 'id' | 'balance'>\n    ) }\n  ) }\n);\n\nexport type LoginMutationVariables = {\n  email: Scalars['String'],\n  password: Scalars['String']\n};\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'LoginResponse' }\n    & Pick<LoginResponse, 'accessToken'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'email' | 'firstName' | 'lastName' | 'dateOfBirth' | 'streetAddress' | 'postCode' | 'city' | 'country'>\n    ) }\n  ) }\n);\n\nexport type LogoutMutationVariables = {};\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'logout'>\n);\n\nexport type MeQueryVariables = {};\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'email' | 'firstName' | 'lastName' | 'dateOfBirth' | 'streetAddress' | 'postCode' | 'city' | 'country'>\n  )> }\n);\n\nexport type RegisterMutationVariables = {\n  email: Scalars['String'],\n  password: Scalars['String'],\n  firstName: Scalars['String'],\n  lastName: Scalars['String'],\n  dateOfBirth: Scalars['String'],\n  streetAddress: Scalars['String'],\n  postCode: Scalars['String'],\n  city: Scalars['String'],\n  country: Scalars['String']\n};\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'register'>\n);\n\nexport type TransactionsQueryVariables = {\n  currency: Scalars['String']\n};\n\n\nexport type TransactionsQuery = (\n  { __typename?: 'Query' }\n  & { transactions: Array<(\n    { __typename?: 'Transaction' }\n    & Pick<Transaction, 'id' | 'transactionType' | 'date' | 'amount'>\n  )> }\n);\n\nexport type UpdatePasswordMutationVariables = {\n  oldPassword: Scalars['String'],\n  newPassword: Scalars['String']\n};\n\n\nexport type UpdatePasswordMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'updatePassword'>\n);\n\n\nexport const AccountDocument = gql`\n    query Account($currency: String!) {\n  account(currency: $currency) {\n    id\n    balance\n  }\n}\n    `;\n\n/**\n * __useAccountQuery__\n *\n * To run a query within a React component, call `useAccountQuery` and pass it any options that fit your needs.\n * When your component renders, `useAccountQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAccountQuery({\n *   variables: {\n *      currency: // value for 'currency'\n *   },\n * });\n */\nexport function useAccountQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AccountQuery, AccountQueryVariables>) {\n        return ApolloReactHooks.useQuery<AccountQuery, AccountQueryVariables>(AccountDocument, baseOptions);\n      }\nexport function useAccountLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AccountQuery, AccountQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AccountQuery, AccountQueryVariables>(AccountDocument, baseOptions);\n        }\nexport type AccountQueryHookResult = ReturnType<typeof useAccountQuery>;\nexport type AccountLazyQueryHookResult = ReturnType<typeof useAccountLazyQuery>;\nexport type AccountQueryResult = ApolloReactCommon.QueryResult<AccountQuery, AccountQueryVariables>;\nexport const AccountsDocument = gql`\n    query Accounts {\n  accounts {\n    id\n    balance\n    currency\n    sortCode\n    iban\n    bic\n  }\n}\n    `;\n\n/**\n * __useAccountsQuery__\n *\n * To run a query within a React component, call `useAccountsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAccountsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAccountsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAccountsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AccountsQuery, AccountsQueryVariables>) {\n        return ApolloReactHooks.useQuery<AccountsQuery, AccountsQueryVariables>(AccountsDocument, baseOptions);\n      }\nexport function useAccountsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AccountsQuery, AccountsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AccountsQuery, AccountsQueryVariables>(AccountsDocument, baseOptions);\n        }\nexport type AccountsQueryHookResult = ReturnType<typeof useAccountsQuery>;\nexport type AccountsLazyQueryHookResult = ReturnType<typeof useAccountsLazyQuery>;\nexport type AccountsQueryResult = ApolloReactCommon.QueryResult<AccountsQuery, AccountsQueryVariables>;\nexport const AddMoneyDocument = gql`\n    mutation AddMoney($amount: Float!, $currency: String!) {\n  addMoney(amount: $amount, currency: $currency) {\n    account {\n      id\n      balance\n    }\n    message\n  }\n}\n    `;\nexport type AddMoneyMutationFn = ApolloReactCommon.MutationFunction<AddMoneyMutation, AddMoneyMutationVariables>;\n\n/**\n * __useAddMoneyMutation__\n *\n * To run a mutation, you first call `useAddMoneyMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddMoneyMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addMoneyMutation, { data, loading, error }] = useAddMoneyMutation({\n *   variables: {\n *      amount: // value for 'amount'\n *      currency: // value for 'currency'\n *   },\n * });\n */\nexport function useAddMoneyMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddMoneyMutation, AddMoneyMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddMoneyMutation, AddMoneyMutationVariables>(AddMoneyDocument, baseOptions);\n      }\nexport type AddMoneyMutationHookResult = ReturnType<typeof useAddMoneyMutation>;\nexport type AddMoneyMutationResult = ApolloReactCommon.MutationResult<AddMoneyMutation>;\nexport type AddMoneyMutationOptions = ApolloReactCommon.BaseMutationOptions<AddMoneyMutation, AddMoneyMutationVariables>;\nexport const CardsDocument = gql`\n    query Cards {\n  cards {\n    id\n    cardNumber\n    pin\n    expiresIn\n    cvv\n    monthlySpendingLimit\n  }\n}\n    `;\n\n/**\n * __useCardsQuery__\n *\n * To run a query within a React component, call `useCardsQuery` and pass it any options that fit your needs.\n * When your component renders, `useCardsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCardsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useCardsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CardsQuery, CardsQueryVariables>) {\n        return ApolloReactHooks.useQuery<CardsQuery, CardsQueryVariables>(CardsDocument, baseOptions);\n      }\nexport function useCardsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CardsQuery, CardsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<CardsQuery, CardsQueryVariables>(CardsDocument, baseOptions);\n        }\nexport type CardsQueryHookResult = ReturnType<typeof useCardsQuery>;\nexport type CardsLazyQueryHookResult = ReturnType<typeof useCardsLazyQuery>;\nexport type CardsQueryResult = ApolloReactCommon.QueryResult<CardsQuery, CardsQueryVariables>;\nexport const CreateAccountDocument = gql`\n    mutation CreateAccount($currency: String!) {\n  createAccount(currency: $currency)\n}\n    `;\nexport type CreateAccountMutationFn = ApolloReactCommon.MutationFunction<CreateAccountMutation, CreateAccountMutationVariables>;\n\n/**\n * __useCreateAccountMutation__\n *\n * To run a mutation, you first call `useCreateAccountMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateAccountMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createAccountMutation, { data, loading, error }] = useCreateAccountMutation({\n *   variables: {\n *      currency: // value for 'currency'\n *   },\n * });\n */\nexport function useCreateAccountMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateAccountMutation, CreateAccountMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateAccountMutation, CreateAccountMutationVariables>(CreateAccountDocument, baseOptions);\n      }\nexport type CreateAccountMutationHookResult = ReturnType<typeof useCreateAccountMutation>;\nexport type CreateAccountMutationResult = ApolloReactCommon.MutationResult<CreateAccountMutation>;\nexport type CreateAccountMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateAccountMutation, CreateAccountMutationVariables>;\nexport const CreateCardDocument = gql`\n    mutation createCard {\n  createCard\n}\n    `;\nexport type CreateCardMutationFn = ApolloReactCommon.MutationFunction<CreateCardMutation, CreateCardMutationVariables>;\n\n/**\n * __useCreateCardMutation__\n *\n * To run a mutation, you first call `useCreateCardMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateCardMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createCardMutation, { data, loading, error }] = useCreateCardMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useCreateCardMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateCardMutation, CreateCardMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateCardMutation, CreateCardMutationVariables>(CreateCardDocument, baseOptions);\n      }\nexport type CreateCardMutationHookResult = ReturnType<typeof useCreateCardMutation>;\nexport type CreateCardMutationResult = ApolloReactCommon.MutationResult<CreateCardMutation>;\nexport type CreateCardMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateCardMutation, CreateCardMutationVariables>;\nexport const CreateTransactionDocument = gql`\n    mutation CreateTransaction($currency: String!) {\n  createTransaction(currency: $currency)\n}\n    `;\nexport type CreateTransactionMutationFn = ApolloReactCommon.MutationFunction<CreateTransactionMutation, CreateTransactionMutationVariables>;\n\n/**\n * __useCreateTransactionMutation__\n *\n * To run a mutation, you first call `useCreateTransactionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTransactionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTransactionMutation, { data, loading, error }] = useCreateTransactionMutation({\n *   variables: {\n *      currency: // value for 'currency'\n *   },\n * });\n */\nexport function useCreateTransactionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateTransactionMutation, CreateTransactionMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateTransactionMutation, CreateTransactionMutationVariables>(CreateTransactionDocument, baseOptions);\n      }\nexport type CreateTransactionMutationHookResult = ReturnType<typeof useCreateTransactionMutation>;\nexport type CreateTransactionMutationResult = ApolloReactCommon.MutationResult<CreateTransactionMutation>;\nexport type CreateTransactionMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateTransactionMutation, CreateTransactionMutationVariables>;\nexport const DeleteAccountDocument = gql`\n    mutation DeleteAccount($currency: String!) {\n  deleteAccount(currency: $currency)\n}\n    `;\nexport type DeleteAccountMutationFn = ApolloReactCommon.MutationFunction<DeleteAccountMutation, DeleteAccountMutationVariables>;\n\n/**\n * __useDeleteAccountMutation__\n *\n * To run a mutation, you first call `useDeleteAccountMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteAccountMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteAccountMutation, { data, loading, error }] = useDeleteAccountMutation({\n *   variables: {\n *      currency: // value for 'currency'\n *   },\n * });\n */\nexport function useDeleteAccountMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteAccountMutation, DeleteAccountMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteAccountMutation, DeleteAccountMutationVariables>(DeleteAccountDocument, baseOptions);\n      }\nexport type DeleteAccountMutationHookResult = ReturnType<typeof useDeleteAccountMutation>;\nexport type DeleteAccountMutationResult = ApolloReactCommon.MutationResult<DeleteAccountMutation>;\nexport type DeleteAccountMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteAccountMutation, DeleteAccountMutationVariables>;\nexport const DestroyAccountDocument = gql`\n    mutation DestroyAccount {\n  destroyAccount\n}\n    `;\nexport type DestroyAccountMutationFn = ApolloReactCommon.MutationFunction<DestroyAccountMutation, DestroyAccountMutationVariables>;\n\n/**\n * __useDestroyAccountMutation__\n *\n * To run a mutation, you first call `useDestroyAccountMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDestroyAccountMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [destroyAccountMutation, { data, loading, error }] = useDestroyAccountMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useDestroyAccountMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DestroyAccountMutation, DestroyAccountMutationVariables>) {\n        return ApolloReactHooks.useMutation<DestroyAccountMutation, DestroyAccountMutationVariables>(DestroyAccountDocument, baseOptions);\n      }\nexport type DestroyAccountMutationHookResult = ReturnType<typeof useDestroyAccountMutation>;\nexport type DestroyAccountMutationResult = ApolloReactCommon.MutationResult<DestroyAccountMutation>;\nexport type DestroyAccountMutationOptions = ApolloReactCommon.BaseMutationOptions<DestroyAccountMutation, DestroyAccountMutationVariables>;\nexport const ExchangeDocument = gql`\n    mutation Exchange($selectedAccountCurrency: String!, $toAccountCurrency: String!, $amount: Float!) {\n  exchange(selectedAccountCurrency: $selectedAccountCurrency, toAccountCurrency: $toAccountCurrency, amount: $amount) {\n    account {\n      id\n      balance\n    }\n    message\n  }\n}\n    `;\nexport type ExchangeMutationFn = ApolloReactCommon.MutationFunction<ExchangeMutation, ExchangeMutationVariables>;\n\n/**\n * __useExchangeMutation__\n *\n * To run a mutation, you first call `useExchangeMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useExchangeMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [exchangeMutation, { data, loading, error }] = useExchangeMutation({\n *   variables: {\n *      selectedAccountCurrency: // value for 'selectedAccountCurrency'\n *      toAccountCurrency: // value for 'toAccountCurrency'\n *      amount: // value for 'amount'\n *   },\n * });\n */\nexport function useExchangeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ExchangeMutation, ExchangeMutationVariables>) {\n        return ApolloReactHooks.useMutation<ExchangeMutation, ExchangeMutationVariables>(ExchangeDocument, baseOptions);\n      }\nexport type ExchangeMutationHookResult = ReturnType<typeof useExchangeMutation>;\nexport type ExchangeMutationResult = ApolloReactCommon.MutationResult<ExchangeMutation>;\nexport type ExchangeMutationOptions = ApolloReactCommon.BaseMutationOptions<ExchangeMutation, ExchangeMutationVariables>;\nexport const LoginDocument = gql`\n    mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    accessToken\n    user {\n      id\n      email\n      firstName\n      lastName\n      dateOfBirth\n      streetAddress\n      postCode\n      city\n      country\n    }\n  }\n}\n    `;\nexport type LoginMutationFn = ApolloReactCommon.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return ApolloReactHooks.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = ApolloReactCommon.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = ApolloReactCommon.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\nexport type LogoutMutationFn = ApolloReactCommon.MutationFunction<LogoutMutation, LogoutMutationVariables>;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {\n        return ApolloReactHooks.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, baseOptions);\n      }\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = ApolloReactCommon.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = ApolloReactCommon.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    id\n    email\n    firstName\n    lastName\n    dateOfBirth\n    streetAddress\n    postCode\n    city\n    country\n  }\n}\n    `;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        return ApolloReactHooks.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n      }\nexport function useMeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = ApolloReactCommon.QueryResult<MeQuery, MeQueryVariables>;\nexport const RegisterDocument = gql`\n    mutation Register($email: String!, $password: String!, $firstName: String!, $lastName: String!, $dateOfBirth: String!, $streetAddress: String!, $postCode: String!, $city: String!, $country: String!) {\n  register(email: $email, password: $password, firsName: $firstName, lastName: $lastName, dateOfBirth: $dateOfBirth, streetAddress: $streetAddress, postCode: $postCode, city: $city, country: $country)\n}\n    `;\nexport type RegisterMutationFn = ApolloReactCommon.MutationFunction<RegisterMutation, RegisterMutationVariables>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *      firstName: // value for 'firstName'\n *      lastName: // value for 'lastName'\n *      dateOfBirth: // value for 'dateOfBirth'\n *      streetAddress: // value for 'streetAddress'\n *      postCode: // value for 'postCode'\n *      city: // value for 'city'\n *      country: // value for 'country'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        return ApolloReactHooks.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, baseOptions);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = ApolloReactCommon.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = ApolloReactCommon.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;\nexport const TransactionsDocument = gql`\n    query Transactions($currency: String!) {\n  transactions(currency: $currency) {\n    id\n    transactionType\n    date\n    amount\n  }\n}\n    `;\n\n/**\n * __useTransactionsQuery__\n *\n * To run a query within a React component, call `useTransactionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useTransactionsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTransactionsQuery({\n *   variables: {\n *      currency: // value for 'currency'\n *   },\n * });\n */\nexport function useTransactionsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<TransactionsQuery, TransactionsQueryVariables>) {\n        return ApolloReactHooks.useQuery<TransactionsQuery, TransactionsQueryVariables>(TransactionsDocument, baseOptions);\n      }\nexport function useTransactionsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<TransactionsQuery, TransactionsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<TransactionsQuery, TransactionsQueryVariables>(TransactionsDocument, baseOptions);\n        }\nexport type TransactionsQueryHookResult = ReturnType<typeof useTransactionsQuery>;\nexport type TransactionsLazyQueryHookResult = ReturnType<typeof useTransactionsLazyQuery>;\nexport type TransactionsQueryResult = ApolloReactCommon.QueryResult<TransactionsQuery, TransactionsQueryVariables>;\nexport const UpdatePasswordDocument = gql`\n    mutation UpdatePassword($oldPassword: String!, $newPassword: String!) {\n  updatePassword(oldPassword: $oldPassword, newPassword: $newPassword)\n}\n    `;\nexport type UpdatePasswordMutationFn = ApolloReactCommon.MutationFunction<UpdatePasswordMutation, UpdatePasswordMutationVariables>;\n\n/**\n * __useUpdatePasswordMutation__\n *\n * To run a mutation, you first call `useUpdatePasswordMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdatePasswordMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updatePasswordMutation, { data, loading, error }] = useUpdatePasswordMutation({\n *   variables: {\n *      oldPassword: // value for 'oldPassword'\n *      newPassword: // value for 'newPassword'\n *   },\n * });\n */\nexport function useUpdatePasswordMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdatePasswordMutation, UpdatePasswordMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdatePasswordMutation, UpdatePasswordMutationVariables>(UpdatePasswordDocument, baseOptions);\n      }\nexport type UpdatePasswordMutationHookResult = ReturnType<typeof useUpdatePasswordMutation>;\nexport type UpdatePasswordMutationResult = ApolloReactCommon.MutationResult<UpdatePasswordMutation>;\nexport type UpdatePasswordMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdatePasswordMutation, UpdatePasswordMutationVariables>;","import * as yup from 'yup';\n\nexport const registerValidationSchema = yup.object({\n    firstName: yup.string().required('First name is required'),\n    lastName: yup.string().required('Last name is required'),\n    email: yup\n        .string()\n        .email()\n        .required('Email is required'),\n    streetAddres: yup.string().required('Street address is required'),\n    postCode: yup.string().required('Post code is required'),\n    city: yup.string().required('City is required'),\n    country: yup.string().required('Country is required'),\n    password: yup.lazy(value =>\n        !value\n            ? yup.string()\n            : yup\n                  .string()\n                  .min(6, 'Password must be at least 6 characters')\n                  .required('Password is required'),\n    ),\n    confirmPassword: yup.string().oneOf([yup.ref('password')], 'Passwords do not match'),\n    dateOfBirth: yup.date().required('Date of birth is required'),\n});\n","import { FieldAttributes, useField } from 'formik';\nimport React from 'react';\nimport { ThemeProvider, TextField } from '@material-ui/core';\nimport { theme } from '../../utils/theme';\n\nexport const FormTextField: React.FC<FieldAttributes<{}>> = ({\n    placeholder,\n    className,\n    type,\n    ...props\n}) => {\n    const [field, meta] = useField<{}>(props);\n    const errorText: string = meta.error && meta.touched ? meta.error : '';\n\n    return (\n        <ThemeProvider theme={theme}>\n            <TextField\n                className={className}\n                type={type}\n                variant=\"outlined\"\n                required={true}\n                placeholder={placeholder}\n                {...field}\n                helperText={errorText}\n                error={!!errorText}\n            />\n        </ThemeProvider>\n    );\n};\n\nexport const FormDatePicker: React.FC<FieldAttributes<{}>> = ({\n    placeholder,\n    className,\n    ...props\n}) => {\n    const [field, meta] = useField<{}>(props);\n    const errorText: string = meta.error && meta.touched ? meta.error : '';\n\n    return (\n        <ThemeProvider theme={theme}>\n            <TextField\n                className={className}\n                type=\"date\"\n                variant=\"outlined\"\n                required={true}\n                placeholder={placeholder}\n                {...field}\n                helperText={errorText}\n                error={!!errorText}\n                label=\"Date of birth\"\n                InputLabelProps={{\n                    shrink: true,\n                }}\n            />\n        </ThemeProvider>\n    );\n};\n","import React from 'react';\nimport { Alert } from '@material-ui/lab';\n\ninterface AlertMessageProps {\n    message: string;\n}\n\nexport const SuccessMessage: React.FC<AlertMessageProps> = ({ message }) => {\n    return (\n        <Alert variant=\"outlined\" severity=\"success\">\n            {message}\n        </Alert>\n    );\n};\n\nexport const WarningMessage: React.FC<AlertMessageProps> = ({ message }) => {\n    return (\n        <Alert variant=\"outlined\" severity=\"warning\">\n            {message}\n        </Alert>\n    );\n};\n\nexport const ErrorMessage: React.FC<AlertMessageProps> = ({ message }) => {\n    return (\n        <Alert variant=\"outlined\" severity=\"error\">\n            {message}\n        </Alert>\n    );\n};\n","import { makeStyles } from '@material-ui/core/styles';\nimport { ColorScheme } from '../../utils/theme';\n\nexport const useRegisterStyles = makeStyles({\n    root: {\n        margin: '0 auto',\n        top: '25%',\n        height: '100%',\n        width: '348px',\n    },\n    headerText: {\n        textAlign: 'center',\n        fontWeight: 'bold',\n    },\n    alignedFormContent: {\n        marginTop: 12,\n        display: 'flex',\n        width: '100%',\n    },\n    alignedFormField: {\n        width: '50%',\n    },\n    formField: {\n        width: '100%',\n        marginTop: 12,\n    },\n    formButton: {\n        marginTop: 12,\n        textTransform: 'none',\n        fontWeight: 'bold',\n        letterSpacing: 1,\n        textAlign: 'center',\n        '&:disabled': {\n            backgroundColor: ColorScheme.ORANGE,\n            color: ColorScheme.WHITE,\n        },\n    },\n    loginText: {\n        margintop: 12,\n    },\n    spacer: {\n        width: 8,\n    },\n});\n","import React, { useState } from 'react';\nimport { Formik, Form } from 'formik';\nimport {\n    useRegisterMutation,\n    RegisterMutationVariables,\n    RegisterMutation,\n} from '../../generated/graphql';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { Button, ThemeProvider } from '@material-ui/core';\nimport { theme } from '../../utils/theme';\nimport { registerValidationSchema } from '../../schemas /registerValidationSchema';\nimport { FormTextField, FormDatePicker } from '../../components/Forms/FormTextField';\nimport { ErrorMessage } from '../../components/Alerts/AlertMessage';\nimport { useRegisterStyles } from './Register.style';\nimport { MutationTuple } from '@apollo/react-hooks';\n\nexport const Register: React.FC<RouteComponentProps> = ({ history }) => {\n    // GraphQL Mutations\n    const [register]: MutationTuple<\n        RegisterMutation,\n        RegisterMutationVariables\n    > = useRegisterMutation();\n\n    // State\n    const [errorMessage, setErrorMessage] = useState<string>('');\n\n    const classes = useRegisterStyles();\n\n    return (\n        <div>\n            <div>\n                <h1 className={classes.headerText}>Sign Up</h1>\n            </div>\n            {errorMessage.length > 0 && (\n                <div style={{ display: 'flex', justifyContent: 'center' }}>\n                    <ErrorMessage message={errorMessage} />\n                </div>\n            )}\n            <Formik\n                initialValues={{\n                    firstName: '',\n                    lastName: '',\n                    streetAddres: '',\n                    postCode: '',\n                    city: '',\n                    country: '',\n                    email: '',\n                    password: '',\n                    confirmPassword: '',\n                    dateOfBirth: '',\n                }}\n                validationSchema={registerValidationSchema}\n                onSubmit={async (data, { setSubmitting, resetForm }) => {\n                    setSubmitting(true);\n\n                    const response = await register({\n                        variables: {\n                            firstName: data.firstName,\n                            lastName: data.lastName,\n                            email: data.email,\n                            password: data.password,\n                            streetAddress: data.streetAddres,\n                            postCode: data.postCode,\n                            city: data.city,\n                            country: data.country,\n                            dateOfBirth: data.dateOfBirth,\n                        },\n                    });\n\n                    if (response.data?.register) {\n                        history.push('/login');\n                        setSubmitting(false);\n                        resetForm();\n                    } else {\n                        setErrorMessage('User with that email already exists.');\n                        setSubmitting(false);\n                    }\n                }}\n            >\n                {({ isSubmitting }) => (\n                    <div className={classes.root}>\n                        <Form onChange={() => setErrorMessage('')}>\n                            <div className={classes.alignedFormContent}>\n                                <FormTextField\n                                    className={classes.alignedFormField}\n                                    name=\"firstName\"\n                                    placeholder=\"First name\"\n                                    type=\"input\"\n                                />\n                                <div className={classes.spacer} />\n                                <FormTextField\n                                    className={classes.alignedFormField}\n                                    name=\"lastName\"\n                                    placeholder=\"Last name\"\n                                    type=\"input\"\n                                />\n                            </div>\n                            <div>\n                                <div className={classes.alignedFormContent}>\n                                    <FormTextField\n                                        className={classes.alignedFormField}\n                                        name=\"streetAddres\"\n                                        placeholder=\"Street address\"\n                                        type=\"input\"\n                                    />\n                                    <div className={classes.spacer} />\n                                    <FormTextField\n                                        className={classes.alignedFormField}\n                                        name=\"postCode\"\n                                        placeholder=\"Post code\"\n                                        type=\"input\"\n                                    />\n                                </div>\n                                <div className={classes.alignedFormContent}>\n                                    <FormTextField\n                                        className={classes.alignedFormField}\n                                        name=\"city\"\n                                        placeholder=\"City\"\n                                        type=\"input\"\n                                    />\n                                    <div className={classes.spacer} />\n                                    <FormTextField\n                                        className={classes.alignedFormField}\n                                        name=\"country\"\n                                        placeholder=\"Country\"\n                                        type=\"input\"\n                                    />\n                                </div>\n                                <FormTextField\n                                    className={classes.formField}\n                                    name=\"email\"\n                                    placeholder=\"Email\"\n                                    type=\"input\"\n                                />\n                                <FormTextField\n                                    className={classes.formField}\n                                    name=\"password\"\n                                    placeholder=\"Password\"\n                                    type=\"password\"\n                                />\n                                <FormTextField\n                                    className={classes.formField}\n                                    name=\"confirmPassword\"\n                                    placeholder=\"Confirm password\"\n                                    type=\"password\"\n                                />\n                                <FormDatePicker className={classes.formField} name=\"dateOfBirth\" />\n                            </div>\n                            <div className={classes.formButton}>\n                                <ThemeProvider theme={theme}>\n                                    <Button\n                                        className={classes.formButton}\n                                        disabled={isSubmitting}\n                                        variant=\"contained\"\n                                        color=\"secondary\"\n                                        type=\"submit\"\n                                    >\n                                        Sign Up\n                                    </Button>\n                                </ThemeProvider>\n                            </div>\n                            <div className={classes.loginText}>\n                                <p>\n                                    Already have an account? <a href=\"/login\">Login here.</a>\n                                </p>\n                            </div>\n                        </Form>\n                    </div>\n                )}\n            </Formik>\n        </div>\n    );\n};\n","import * as yup from 'yup';\n\nexport const loginValidationSchema = yup.object({\n    email: yup\n        .string()\n        .email()\n        .required('Email is required'),\n    password: yup.lazy(value =>\n        !value\n            ? yup.string()\n            : yup\n                  .string()\n                  .min(6, 'Password must be at least 6 characters')\n                  .required('Password is required'),\n    ),\n});\n","import { makeStyles } from '@material-ui/core/styles';\nimport { ColorScheme } from '../../utils/theme';\n\nexport const useLoginStyles = makeStyles({\n    root: {\n        margin: '0 auto',\n        top: '25%',\n        height: '100%',\n        width: '348px',\n    },\n    headerText: {\n        textAlign: 'center',\n        fontWeight: 'bold',\n    },\n    formField: {\n        width: '100%',\n        marginTop: 12,\n    },\n    formButton: {\n        marginTop: 12,\n        textTransform: 'none',\n        fontWeight: 'bold',\n        letterSpacing: 1,\n        textAlign: 'center',\n        '&:disabled': {\n            backgroundColor: ColorScheme.ORANGE,\n            color: ColorScheme.WHITE,\n        },\n    },\n    registerText: {\n        marginTop: 12,\n    },\n});\n","import React, { useState } from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport {\n    useLoginMutation,\n    MeDocument,\n    MeQuery,\n    LoginMutationVariables,\n    LoginMutation,\n} from '../../generated/graphql';\nimport { setAccessToken } from '../../utils/accessToken';\nimport { Formik, Form } from 'formik';\nimport { FormTextField } from '../../components/Forms/FormTextField';\nimport { Button, ThemeProvider } from '@material-ui/core';\nimport { theme, ColorScheme } from '../../utils/theme';\nimport { loginValidationSchema } from '../../schemas /loginValidationSchema';\nimport { ErrorMessage } from '../../components/Alerts/AlertMessage';\nimport { useLoginStyles } from './Login.style';\nimport { MutationTuple } from '@apollo/react-hooks';\nimport { ExecutionResult } from 'graphql';\n\nexport const Login: React.FC<RouteComponentProps> = ({ history }) => {\n    // GraphQL Mutations\n    const [login]: MutationTuple<LoginMutation, LoginMutationVariables> = useLoginMutation();\n\n    // State\n    const [errorMessage, setErrorMessage] = useState<string>('');\n\n    const classes = useLoginStyles();\n\n    return (\n        <div className={classes.root}>\n            <div>\n                <h1 className={classes.headerText}>Login</h1>\n            </div>\n            {errorMessage.length > 0 && (\n                <div style={{ display: 'flex', justifyContent: 'center' }}>\n                    <ErrorMessage message={errorMessage} />\n                </div>\n            )}\n            <Formik\n                initialValues={{ email: '', password: '' }}\n                validationSchema={loginValidationSchema}\n                onSubmit={async (data, { setSubmitting, resetForm }) => {\n                    setSubmitting(true);\n\n                    try {\n                        const response: ExecutionResult<LoginMutation> = await login({\n                            variables: {\n                                email: data.email,\n                                password: data.password,\n                            },\n                            update: (store, { data }) => {\n                                if (!data) {\n                                    return null;\n                                }\n                                store.writeQuery<MeQuery>({\n                                    query: MeDocument,\n                                    data: {\n                                        me: data.login.user,\n                                    },\n                                });\n                            },\n                        });\n\n                        if (response && response.data) {\n                            setAccessToken(response.data.login.accessToken);\n                            history.push('/dashboard');\n                            setSubmitting(false);\n                            resetForm();\n                        }\n                    } catch (error) {\n                        const errorMessage: string = error.message.split(':')[1];\n                        setErrorMessage(errorMessage);\n                        setSubmitting(false);\n                    }\n                }}\n            >\n                {({ isSubmitting }) => (\n                    <div>\n                        <Form>\n                            <div>\n                                <FormTextField\n                                    className={classes.formField}\n                                    name=\"email\"\n                                    placeholder=\"Email\"\n                                    type=\"input\"\n                                />\n                                <FormTextField\n                                    className={classes.formField}\n                                    name=\"password\"\n                                    placeholder=\"Password\"\n                                    type=\"password\"\n                                />\n                            </div>\n                            <div className={classes.formButton}>\n                                <ThemeProvider theme={theme}>\n                                    <Button\n                                        className={classes.formButton}\n                                        disabled={isSubmitting}\n                                        variant=\"contained\"\n                                        color=\"secondary\"\n                                        type=\"submit\"\n                                    >\n                                        Login\n                                    </Button>\n                                </ThemeProvider>\n                            </div>\n                            <div className={classes.registerText}>\n                                <p>\n                                    Don't have an account?{' '}\n                                    <a\n                                        href=\"/register\"\n                                        style={{\n                                            textDecoration: 'none',\n                                            color: ColorScheme.SECONDARY,\n                                        }}\n                                    >\n                                        Sign up here.\n                                    </a>\n                                </p>\n                            </div>\n                        </Form>\n                    </div>\n                )}\n            </Formik>\n        </div>\n    );\n};\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref3 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref4 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref5 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref6 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref7 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref8 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref9 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref10 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref11 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref12 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref13 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref14 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref15 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref16 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar SvgWorld = function SvgWorld(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    id: \"Layer_1\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 512 512\",\n    style: {\n      enableBackground: \"new 0 0 512 512\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, React.createElement(\"circle\", {\n    style: {\n      fill: \"#0052B4\"\n    },\n    cx: 256,\n    cy: 256,\n    r: 256\n  }), React.createElement(\"g\", null, React.createElement(\"polygon\", {\n    style: {\n      fill: \"#FFDA44\"\n    },\n    points: \"256.001,100.174 264.29,125.683 291.11,125.683 269.411,141.448 277.7,166.957  256.001,151.191 234.301,166.957 242.59,141.448 220.891,125.683 247.712,125.683  \"\n  }), React.createElement(\"polygon\", {\n    style: {\n      fill: \"#FFDA44\"\n    },\n    points: \"145.814,145.814 169.714,157.99 188.679,139.026 184.482,165.516 208.381,177.693  181.89,181.889 177.694,208.381 165.517,184.482 139.027,188.679 157.992,169.714  \"\n  }), React.createElement(\"polygon\", {\n    style: {\n      fill: \"#FFDA44\"\n    },\n    points: \"100.175,256 125.684,247.711 125.684,220.89 141.448,242.59 166.958,234.301 151.191,256  166.958,277.699 141.448,269.411 125.684,291.11 125.684,264.289  \"\n  }), React.createElement(\"polygon\", {\n    style: {\n      fill: \"#FFDA44\"\n    },\n    points: \"145.814,366.186 157.991,342.286 139.027,323.321 165.518,327.519 177.693,303.62  181.89,330.111 208.38,334.307 184.484,346.484 188.679,372.974 169.714,354.009  \"\n  }), React.createElement(\"polygon\", {\n    style: {\n      fill: \"#FFDA44\"\n    },\n    points: \"256.001,411.826 247.711,386.317 220.891,386.317 242.591,370.552 234.301,345.045  256.001,360.809 277.7,345.045 269.411,370.552 291.11,386.317 264.289,386.317  \"\n  }), React.createElement(\"polygon\", {\n    style: {\n      fill: \"#FFDA44\"\n    },\n    points: \"366.187,366.186 342.288,354.01 323.322,372.975 327.519,346.483 303.622,334.307  330.112,330.111 334.308,303.62 346.484,327.519 372.974,323.321 354.009,342.288  \"\n  }), React.createElement(\"polygon\", {\n    style: {\n      fill: \"#FFDA44\"\n    },\n    points: \"411.826,256 386.317,264.289 386.317,291.11 370.552,269.41 345.045,277.699 360.81,256  345.045,234.301 370.553,242.59 386.317,220.89 386.317,247.712  \"\n  }), React.createElement(\"polygon\", {\n    style: {\n      fill: \"#FFDA44\"\n    },\n    points: \"366.187,145.814 354.01,169.714 372.975,188.679 346.483,184.481 334.308,208.38  330.112,181.889 303.622,177.692 327.519,165.516 323.322,139.027 342.289,157.991  \"\n  })), _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgWorld, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/world.7aea52bb.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref3 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref4 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref5 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref6 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref7 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref8 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref9 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref10 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref11 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref12 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref13 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref14 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref15 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref16 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar SvgFlag = function SvgFlag(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    id: \"Layer_1\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 512 512\",\n    style: {\n      enableBackground: \"new 0 0 512 512\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, React.createElement(\"circle\", {\n    style: {\n      fill: \"#F0F0F0\"\n    },\n    cx: 256,\n    cy: 256,\n    r: 256\n  }), React.createElement(\"g\", null, React.createElement(\"path\", {\n    style: {\n      fill: \"#D80027\"\n    },\n    d: \"M244.87,256H512c0-23.106-3.08-45.49-8.819-66.783H244.87V256z\"\n  }), React.createElement(\"path\", {\n    style: {\n      fill: \"#D80027\"\n    },\n    d: \"M244.87,122.435h229.556c-15.671-25.572-35.708-48.175-59.07-66.783H244.87V122.435z\"\n  }), React.createElement(\"path\", {\n    style: {\n      fill: \"#D80027\"\n    },\n    d: \"M256,512c60.249,0,115.626-20.824,159.356-55.652H96.644C140.374,491.176,195.751,512,256,512z\"\n  }), React.createElement(\"path\", {\n    style: {\n      fill: \"#D80027\"\n    },\n    d: \"M37.574,389.565h436.852c12.581-20.529,22.338-42.969,28.755-66.783H8.819 C15.236,346.596,24.993,369.036,37.574,389.565z\"\n  })), React.createElement(\"path\", {\n    style: {\n      fill: \"#0052B4\"\n    },\n    d: \"M118.584,39.978h23.329l-21.7,15.765l8.289,25.509l-21.699-15.765L85.104,81.252l7.16-22.037 C73.158,75.13,56.412,93.776,42.612,114.552h7.475l-13.813,10.035c-2.152,3.59-4.216,7.237-6.194,10.938l6.596,20.301l-12.306-8.941 c-3.059,6.481-5.857,13.108-8.372,19.873l7.267,22.368h26.822l-21.7,15.765l8.289,25.509l-21.699-15.765l-12.998,9.444 C0.678,234.537,0,245.189,0,256h256c0-141.384,0-158.052,0-256C205.428,0,158.285,14.67,118.584,39.978z M128.502,230.4 l-21.699-15.765L85.104,230.4l8.289-25.509l-21.7-15.765h26.822l8.288-25.509l8.288,25.509h26.822l-21.7,15.765L128.502,230.4z  M120.213,130.317l8.289,25.509l-21.699-15.765l-21.699,15.765l8.289-25.509l-21.7-15.765h26.822l8.288-25.509l8.288,25.509h26.822 L120.213,130.317z M220.328,230.4l-21.699-15.765L176.93,230.4l8.289-25.509l-21.7-15.765h26.822l8.288-25.509l8.288,25.509h26.822 l-21.7,15.765L220.328,230.4z M212.039,130.317l8.289,25.509l-21.699-15.765l-21.699,15.765l8.289-25.509l-21.7-15.765h26.822 l8.288-25.509l8.288,25.509h26.822L212.039,130.317z M212.039,55.743l8.289,25.509l-21.699-15.765L176.93,81.252l8.289-25.509 l-21.7-15.765h26.822l8.288-25.509l8.288,25.509h26.822L212.039,55.743z\"\n  }), _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgFlag, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/flag.36ab476e.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref3 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref4 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref5 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref6 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref7 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref8 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref9 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref10 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref11 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref12 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref13 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref14 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref15 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref16 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar SvgUk = function SvgUk(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    id: \"Layer_1\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 512 512\",\n    style: {\n      enableBackground: \"new 0 0 512 512\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, React.createElement(\"circle\", {\n    style: {\n      fill: \"#F0F0F0\"\n    },\n    cx: 256,\n    cy: 256,\n    r: 256\n  }), React.createElement(\"g\", null, React.createElement(\"path\", {\n    style: {\n      fill: \"#0052B4\"\n    },\n    d: \"M52.92,100.142c-20.109,26.163-35.272,56.318-44.101,89.077h133.178L52.92,100.142z\"\n  }), React.createElement(\"path\", {\n    style: {\n      fill: \"#0052B4\"\n    },\n    d: \"M503.181,189.219c-8.829-32.758-23.993-62.913-44.101-89.076l-89.075,89.076H503.181z\"\n  }), React.createElement(\"path\", {\n    style: {\n      fill: \"#0052B4\"\n    },\n    d: \"M8.819,322.784c8.83,32.758,23.993,62.913,44.101,89.075l89.074-89.075L8.819,322.784L8.819,322.784 z\"\n  }), React.createElement(\"path\", {\n    style: {\n      fill: \"#0052B4\"\n    },\n    d: \"M411.858,52.921c-26.163-20.109-56.317-35.272-89.076-44.102v133.177L411.858,52.921z\"\n  }), React.createElement(\"path\", {\n    style: {\n      fill: \"#0052B4\"\n    },\n    d: \"M100.142,459.079c26.163,20.109,56.318,35.272,89.076,44.102V370.005L100.142,459.079z\"\n  }), React.createElement(\"path\", {\n    style: {\n      fill: \"#0052B4\"\n    },\n    d: \"M189.217,8.819c-32.758,8.83-62.913,23.993-89.075,44.101l89.075,89.075V8.819z\"\n  }), React.createElement(\"path\", {\n    style: {\n      fill: \"#0052B4\"\n    },\n    d: \"M322.783,503.181c32.758-8.83,62.913-23.993,89.075-44.101l-89.075-89.075V503.181z\"\n  }), React.createElement(\"path\", {\n    style: {\n      fill: \"#0052B4\"\n    },\n    d: \"M370.005,322.784l89.075,89.076c20.108-26.162,35.272-56.318,44.101-89.076H370.005z\"\n  })), React.createElement(\"g\", null, React.createElement(\"path\", {\n    style: {\n      fill: \"#D80027\"\n    },\n    d: \"M509.833,222.609h-220.44h-0.001V2.167C278.461,0.744,267.317,0,256,0 c-11.319,0-22.461,0.744-33.391,2.167v220.44v0.001H2.167C0.744,233.539,0,244.683,0,256c0,11.319,0.744,22.461,2.167,33.391 h220.44h0.001v220.442C233.539,511.256,244.681,512,256,512c11.317,0,22.461-0.743,33.391-2.167v-220.44v-0.001h220.442 C511.256,278.461,512,267.319,512,256C512,244.683,511.256,233.539,509.833,222.609z\"\n  }), React.createElement(\"path\", {\n    style: {\n      fill: \"#D80027\"\n    },\n    d: \"M322.783,322.784L322.783,322.784L437.019,437.02c5.254-5.252,10.266-10.743,15.048-16.435 l-97.802-97.802h-31.482V322.784z\"\n  }), React.createElement(\"path\", {\n    style: {\n      fill: \"#D80027\"\n    },\n    d: \"M189.217,322.784h-0.002L74.98,437.019c5.252,5.254,10.743,10.266,16.435,15.048l97.802-97.804 V322.784z\"\n  }), React.createElement(\"path\", {\n    style: {\n      fill: \"#D80027\"\n    },\n    d: \"M189.217,189.219v-0.002L74.981,74.98c-5.254,5.252-10.266,10.743-15.048,16.435l97.803,97.803 H189.217z\"\n  }), React.createElement(\"path\", {\n    style: {\n      fill: \"#D80027\"\n    },\n    d: \"M322.783,189.219L322.783,189.219L437.02,74.981c-5.252-5.254-10.743-10.266-16.435-15.047 l-97.802,97.803V189.219z\"\n  })), _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgUk, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/uk.e5564902.svg\";\nexport { ForwardRef as ReactComponent };","export enum Currency {\n    EURO = 'EUR',\n    POUND = 'GBP',\n    DOLLAR = 'USD',\n    BITCOIN = 'BTC',\n}\n","import { makeStyles } from '@material-ui/core';\nimport { ColorScheme } from '../../../utils/theme';\n\nexport const useAccountStyles = makeStyles({\n    root: {\n        margin: '0 auto',\n        marginTop: 24,\n    },\n    accountBalance: {\n        fontSize: 28,\n        textAlign: 'center',\n    },\n    accountInfo: {\n        display: 'flex',\n        justifyContent: 'space-evenly',\n        width: '240px',\n        margin: '0 auto',\n        marginTop: 12,\n        alignItems: 'center',\n    },\n    accountButtonsSection: {\n        textAlign: 'center',\n        display: 'flex',\n        justifyContent: 'space-evenly',\n        alignItems: 'center',\n        margin: '0 auto',\n        width: '480px',\n        marginTop: 24,\n    },\n    accountButton: {\n        backgroundColor: ColorScheme.PRIMARY,\n        color: ColorScheme.WHITE,\n        '&:hover': {\n            background: ColorScheme.PRIMARY_HOVER,\n        },\n    },\n    accountButtonSection: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    accountButtonText: {\n        marginTop: 12,\n        fontSize: 14,\n    },\n    transactions: {\n        marginTop: 12,\n        margin: '0 auto',\n        display: 'flex',\n        flexDirection: 'column',\n        width: 480,\n    },\n    transactionsHeader: {\n        marginTop: 12,\n        display: 'flex',\n    },\n    transactionCards: {\n        marginTop: 8,\n    },\n    dialogButton: {\n        marginTop: 12,\n        textTransform: 'none',\n        fontWeight: 'bold',\n        letterSpacing: 1,\n        textAlign: 'center',\n    },\n});\n","import { createUseStyles } from 'react-jss';\nimport { ColorScheme } from '../../utils/theme';\n\nexport const useDialogStyles = createUseStyles({\n    dialog: {\n        width: '500px',\n        maxWidth: '100%',\n        margin: '0 auto',\n        position: 'fixed',\n        left: '50%',\n        top: '50%',\n        transform: 'translate(-50%, -50%)',\n        zIndex: 999,\n        backgroundColor: 'white',\n        padding: '10px 20px 40px',\n        borderRadius: '8px',\n        display: 'flex',\n        flexDirection: 'column',\n        boxShadow: '3px 7px 18px 0px rgba(148,148,148,1)',\n    },\n    closeButton: {\n        backgroundColor: ColorScheme.PRIMARY,\n        color: ColorScheme.WHITE,\n        fontSize: 16,\n        outline: 'none',\n        marginBottom: '15px',\n        padding: '3px 8px',\n        cursor: 'pointer',\n        borderRadius: '50%',\n        border: 'none',\n        width: '30px',\n        height: '30px',\n        fontWeight: 'bold',\n        alignSelf: 'flex-end',\n        '&:hover': {\n            backgroundColor: ColorScheme.PRIMARY_HOVER,\n        },\n    },\n});\n","import React from 'react';\nimport { useDialogStyles } from './Dialog.style';\n\ninterface DialogProps {\n    isOpen: boolean;\n    onClose: any;\n}\n\nexport const Dialog: React.FC<DialogProps> = ({ children, isOpen, onClose }) => {\n    const classes = useDialogStyles();\n\n    let dialog: JSX.Element | undefined = (\n        <div className={classes.dialog}>\n            <button className={classes.closeButton} onClick={onClose}>\n                x\n            </button>\n            {children}\n        </div>\n    );\n\n    if (!isOpen) {\n        dialog = undefined;\n    }\n    return <div>{dialog}</div>;\n};\n","import React from 'react';\nimport { Typography } from '@material-ui/core';\nimport { ColorScheme } from '../../utils/theme';\n\ninterface TitleProps {\n    title: string;\n    fontSize: number;\n}\n\nexport const Title: React.FC<TitleProps> = (props: TitleProps) => {\n    return (\n        <Typography\n            style={{ fontWeight: 'bold', fontSize: props.fontSize, color: ColorScheme.PRIMARY }}\n        >\n            {props.title}\n        </Typography>\n    );\n};\n","import { createUseStyles } from 'react-jss';\n\nexport const useLoadingStyles = createUseStyles({\n    root: {\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    image: {\n        height: '124px',\n    },\n});\n","import React from 'react';\nimport { useLoadingStyles } from './Loading.style';\n\nexport const Loading: React.FC = () => {\n    const classes = useLoadingStyles();\n\n    return (\n        <div className={classes.root}>\n            <img className={classes.image} src=\"loading.svg\" alt=\"Loading...\" />\n        </div>\n    );\n};\n","import { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport { ColorScheme } from '../../../utils/theme';\n\nexport const useTransactionCardStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {},\n        expand: {\n            transform: 'rotate(0deg)',\n            marginLeft: 'auto',\n            transition: theme.transitions.create('transform', {\n                duration: theme.transitions.duration.shortest,\n            }),\n        },\n        expandOpen: {\n            transform: 'rotate(180deg)',\n        },\n        expandedText: {\n            fontSize: 14,\n            marginBottom: 8,\n        },\n        avatar: {\n            backgroundColor: ColorScheme.PRIMARY,\n        },\n    }),\n);\n","import React, { useState } from 'react';\nimport {\n    Avatar,\n    Card,\n    CardHeader,\n    Collapse,\n    CardContent,\n    IconButton,\n    CardActions,\n    ThemeProvider,\n} from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { theme } from '../../utils/theme';\nimport { useTransactionCardStyles } from './styles/TransactionCard.style';\n\ninterface TransactionCardProps {\n    title: string;\n    amount: string;\n    time: string;\n    card?: string;\n    transactionIcon?: any;\n    currencyIcon?: string;\n}\n\nexport const TransactionCard: React.FC<TransactionCardProps> = ({\n    title,\n    time,\n    amount,\n    card,\n    transactionIcon,\n    currencyIcon,\n}) => {\n    const classes = useTransactionCardStyles();\n    const [expanded, setExpanded] = useState(false);\n\n    const handleExpandClick = () => {\n        setExpanded(!expanded);\n    };\n\n    return (\n        <div style={{ marginTop: 12 }}>\n            <Card className={classes.root}>\n                <CardHeader\n                    avatar={\n                        <Avatar className={classes.avatar} aria-label=\"whatever\">\n                            {transactionIcon}\n                        </Avatar>\n                    }\n                    title={title}\n                    subheader={time}\n                    style={{ textAlign: 'left' }}\n                />\n                <CardActions style={{ marginTop: '-40px' }}>\n                    <ThemeProvider theme={theme}>\n                        <IconButton\n                            style={{ marginLeft: 420 }}\n                            color=\"primary\"\n                            onClick={handleExpandClick}\n                            aria-expanded={expanded}\n                            aria-label=\"show more\"\n                        >\n                            <ExpandMoreIcon />\n                        </IconButton>\n                    </ThemeProvider>\n                </CardActions>\n                <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n                    <CardContent style={{ marginTop: '-24px' }}>\n                        <hr\n                            style={{\n                                border: 'none',\n                                borderBottom: `1px solid black`,\n                            }}\n                        />\n                        <div className={classes.expandedText} style={{ marginTop: 12 }}>\n                            Apollo card: <span style={{ color: 'black' }}>{card}</span>\n                        </div>\n                        <div className={classes.expandedText}>\n                            Amount:{' '}\n                            <span style={{ color: 'black' }}>\n                                {currencyIcon}\n                                {amount}\n                            </span>\n                        </div>\n                    </CardContent>\n                </Collapse>\n            </Card>\n        </div>\n    );\n};\n","import React from 'react';\nimport { TransactionsQuery, Transaction } from '../../../generated/graphql';\nimport { useAccountStyles } from '../styles/Account.style';\nimport { Loading } from '../../../components/Loading/Loading';\nimport { TransactionCard } from '../../../components/Cards/TransactionCard';\nimport PaymentIcon from '@material-ui/icons/Payment';\nimport AccountBalanceIcon from '@material-ui/icons/AccountBalance';\nimport LocalAtmIcon from '@material-ui/icons/LocalAtm';\nimport ReceiptIcon from '@material-ui/icons/Receipt';\n\ninterface TransactionProps {\n    account: TransactionsQuery | undefined;\n    cardNumber: string | undefined;\n    currencyIcon?: string;\n}\n\nexport const Transactions: React.FC<TransactionProps> = ({ account, cardNumber, currencyIcon }) => {\n    const classes = useAccountStyles();\n\n    if (!account) {\n        return <Loading />;\n    }\n\n    return (\n        <div>\n            <div className={classes.transactions}>\n                <div className={classes.transactionsHeader}></div>\n                <div className={classes.transactionCards}>\n                    {account.transactions.length > 0 &&\n                        account.transactions.map((transaction: Transaction) => {\n                            let transactionIcon: any;\n\n                            switch (transaction.transactionType) {\n                                case 'payment':\n                                    transactionIcon = <PaymentIcon />;\n                                    break;\n                                case 'deposit':\n                                    transactionIcon = <AccountBalanceIcon />;\n                                    break;\n                                case 'withdrawal':\n                                    transactionIcon = <LocalAtmIcon />;\n                                    break;\n                                case 'invoice':\n                                    transactionIcon = <ReceiptIcon />;\n                                    break;\n                            }\n\n                            return (\n                                <TransactionCard\n                                    key={transaction.id}\n                                    title={transaction.transactionType}\n                                    time={new Date(\n                                        Date.parse(transaction.date),\n                                    ).toLocaleDateString()}\n                                    card={cardNumber}\n                                    amount={transaction.amount}\n                                    currencyIcon={currencyIcon}\n                                    transactionIcon={transactionIcon}\n                                />\n                            );\n                        })}\n                </div>\n            </div>\n        </div>\n    );\n};\n","import * as yup from 'yup';\n\nexport const addMoneyValidationSchema = yup.object({\n    amount: yup\n        .number()\n        .required()\n        .positive('Amount must be a positive number')\n        .integer(),\n});\n","import React, { useState, MouseEvent, useEffect, ChangeEvent } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport {\n    ThemeProvider,\n    IconButton,\n    Button,\n    InputLabel,\n    FormControl,\n    Select,\n    MenuItem,\n} from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport SwapVert from '@material-ui/icons/SwapVert';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport { ReactComponent as Euro } from '../../assets/world.svg';\nimport { ReactComponent as Dollar } from '../../assets/flag.svg';\nimport { ReactComponent as Pound } from '../../assets/uk.svg';\nimport { theme } from '../../utils/theme';\nimport { useAccountStyles } from './styles/Account.style';\nimport {\n    useCreateTransactionMutation,\n    useTransactionsQuery,\n    TransactionsDocument,\n    useAddMoneyMutation,\n    useMeQuery,\n    CreateTransactionMutation,\n    CreateTransactionMutationVariables,\n    AddMoneyMutation,\n    AddMoneyMutationVariables,\n    TransactionsQueryResult,\n    MeQueryResult,\n    useAccountQuery,\n    ExchangeMutation,\n    ExchangeMutationVariables,\n    useExchangeMutation,\n    AccountQueryResult,\n    CardsQueryResult,\n    useCardsQuery,\n    AccountsQueryResult,\n    useAccountsQuery,\n    DeleteAccountMutationVariables,\n    DeleteAccountMutation,\n    useDeleteAccountMutation,\n} from '../../generated/graphql';\nimport { Dialog } from '../../components/Dialog/Dialog';\nimport { FormTextField } from '../../components/Forms/FormTextField';\nimport { Form, Formik } from 'formik';\nimport { Title } from '../../components/Typography/Title';\nimport { MutationTuple } from '@apollo/react-hooks';\nimport { ExecutionResult } from 'graphql';\nimport { ExecutionResultDataDefault } from 'graphql/execution/execute';\nimport { Transactions } from './Transactions/Transactions';\nimport { ErrorMessage, SuccessMessage, WarningMessage } from '../../components/Alerts/AlertMessage';\nimport { addMoneyValidationSchema } from '../../schemas /addMoneyValidationSchema';\nimport { Loading } from '../../components/Loading/Loading';\n\nexport const Account: React.FC = () => {\n    // State\n    const [toAccountCurrency, setToAccountCurrency] = useState<string>('');\n    const [accountBalance, setAccountBalance] = useState<number>(0);\n    const [openAddDialog, setOpenAddDialog] = useState<boolean>(false);\n    const [openExchangeDialog, setOpenExchangeDialog] = useState<boolean>(false);\n    const [openDetailsDialog, setOpenDetailsDialog] = useState<boolean>(false);\n    const [hasCard, setHasCard] = useState<boolean>(false);\n    const [cardNumber, setCardNumber] = useState<string>('');\n    const [successMessage, setSuccessMessage] = useState<string>('');\n    const [errorMessage, setErrorMessage] = useState<string>('');\n    const [warningMessage, setWarningMessage] = useState<string>('');\n    const [showLoadingIcon, setShowLoadingIcon] = useState<boolean>(false);\n\n    const location = useLocation<any>();\n    const history = useHistory();\n\n    // GraphQL Mutations\n    const [createTransaction]: MutationTuple<\n        CreateTransactionMutation,\n        CreateTransactionMutationVariables\n    > = useCreateTransactionMutation();\n    const [addMoney]: MutationTuple<\n        AddMoneyMutation,\n        AddMoneyMutationVariables\n    > = useAddMoneyMutation();\n    const [exchange]: MutationTuple<\n        ExchangeMutation,\n        ExchangeMutationVariables\n    > = useExchangeMutation();\n    const [deleteAccount]: MutationTuple<\n        DeleteAccountMutation,\n        DeleteAccountMutationVariables\n    > = useDeleteAccountMutation();\n\n    // GraphQL Queries\n    const user: MeQueryResult = useMeQuery();\n    const account: AccountQueryResult = useAccountQuery({\n        variables: { currency: location.state.currency },\n    });\n    const accounts: AccountsQueryResult = useAccountsQuery();\n    const cards: CardsQueryResult = useCardsQuery();\n    const { data }: TransactionsQueryResult = useTransactionsQuery({\n        variables: { currency: location.state.currency },\n    });\n\n    const classes = useAccountStyles();\n\n    let currencyIcon: string = '';\n    let currencyFullText: string = '';\n    let svg: any | string;\n\n    // When the component mounts, fetch the account balance\n    useEffect(() => {\n        if (account.data) {\n            setAccountBalance(account.data.account.balance);\n        } else {\n            setAccountBalance(location.state.balance);\n        }\n    }, [account, location]);\n\n    // When the component mounts, check if a card exists for the account\n    useEffect(() => {\n        if (cards.data && cards.data.cards.length > 0) {\n            setHasCard(true);\n            setCardNumber(cards.data.cards[0].cardNumber);\n        }\n    }, [cards]);\n\n    switch (location.state.currency) {\n        case 'EUR':\n            currencyIcon = '€';\n            currencyFullText = 'Euro';\n            svg = <Euro />;\n            break;\n        case 'USD':\n            currencyIcon = '$';\n            currencyFullText = 'US Dollar';\n            svg = <Dollar />;\n            break;\n        case 'GBP':\n            currencyIcon = '£';\n            currencyFullText = 'British Pound';\n            svg = <Pound />;\n            break;\n        case 'BTC':\n            currencyIcon = '฿';\n            currencyFullText = 'Bitcoin';\n            svg = undefined;\n            break;\n    }\n\n    const simulate = async (): Promise<void> => {\n        try {\n            const response: ExecutionResult<ExecutionResultDataDefault> = await createTransaction({\n                variables: {\n                    currency: location.state.currency,\n                },\n                refetchQueries: [\n                    {\n                        query: TransactionsDocument,\n                        variables: {\n                            currency: location.state.currency,\n                        },\n                    },\n                ],\n            });\n            if (response && response.data) {\n                // Update the account balance\n                setAccountBalance(response.data.createTransaction);\n            }\n        } catch (error) {\n            const errorMessage: string = error.message.split(':')[1];\n            console.log(errorMessage);\n        }\n    };\n\n    const renderAddDialog = (): JSX.Element => {\n        return (\n            <Dialog isOpen={openAddDialog} onClose={() => setOpenAddDialog(false)}>\n                <Title title=\"Add money\" fontSize={18} />\n                <div style={{ marginTop: 12 }}>\n                    <Formik\n                        initialValues={{ amount: 10 }}\n                        validationSchema={addMoneyValidationSchema}\n                        onSubmit={async (data, { setSubmitting, resetForm }) => {\n                            setSubmitting(true);\n\n                            try {\n                                const response = await addMoney({\n                                    variables: {\n                                        amount: data.amount,\n                                        currency: location.state.currency,\n                                    },\n                                });\n\n                                if (response && response.data) {\n                                    setSubmitting(false);\n                                    setSuccessMessage(response.data.addMoney.message);\n                                    resetForm();\n                                }\n                            } catch (error) {\n                                const errorMessage = error.message.split(':')[1];\n                                setErrorMessage(errorMessage);\n                                setSubmitting(false);\n                            }\n                        }}\n                    >\n                        {({ isSubmitting }) => (\n                            <div>\n                                <Form>\n                                    <FormTextField\n                                        name=\"amount\"\n                                        placeholder=\"amount\"\n                                        type=\"number\"\n                                    />\n                                    <div>\n                                        <ThemeProvider theme={theme}>\n                                            <Button\n                                                className={classes.dialogButton}\n                                                disabled={isSubmitting}\n                                                variant=\"contained\"\n                                                color=\"secondary\"\n                                                type=\"submit\"\n                                            >\n                                                Add money\n                                            </Button>\n                                        </ThemeProvider>\n                                    </div>\n                                </Form>\n                            </div>\n                        )}\n                    </Formik>\n                </div>\n            </Dialog>\n        );\n    };\n\n    const renderExchangeDialog = (): JSX.Element => {\n        return (\n            <Dialog isOpen={openExchangeDialog} onClose={() => setOpenExchangeDialog(false)}>\n                <Title title=\"Exchange\" fontSize={18} />\n                <div style={{ marginTop: 12 }}>\n                    <Formik\n                        initialValues={{ amount: 10 }}\n                        onSubmit={async (data, { setSubmitting, resetForm }) => {\n                            setSubmitting(true);\n\n                            if (toAccountCurrency !== '') {\n                                try {\n                                    const response = await exchange({\n                                        variables: {\n                                            selectedAccountCurrency: location.state.currency,\n                                            toAccountCurrency: toAccountCurrency,\n                                            amount: data.amount,\n                                        },\n                                    });\n\n                                    if (response && response.data) {\n                                        // if the exchange was a success update the account balance and render a success message\n                                        setSubmitting(false);\n                                        setSuccessMessage(response.data.exchange.message);\n                                        resetForm();\n                                    }\n                                } catch (error) {\n                                    const errorMessage: string = error.message.split(':')[1];\n                                    setErrorMessage(errorMessage);\n                                    setSubmitting(false);\n                                }\n                            }\n                        }}\n                    >\n                        {({ isSubmitting }) => (\n                            <div>\n                                <Form>\n                                    <FormTextField\n                                        name=\"amount\"\n                                        placeholder=\"amount\"\n                                        type=\"number\"\n                                    />\n                                    <ThemeProvider theme={theme}>\n                                        <FormControl style={{ marginLeft: 8 }} variant=\"outlined\">\n                                            <InputLabel id=\"select-filled-label\">To</InputLabel>\n                                            <Select\n                                                labelId=\"select-filled-label\"\n                                                id=\"select-filled\"\n                                                value={toAccountCurrency}\n                                                onChange={(\n                                                    event: ChangeEvent<{ value: unknown }>,\n                                                ) => {\n                                                    setToAccountCurrency(\n                                                        event.target.value as string,\n                                                    );\n                                                }}\n                                                label=\"To\"\n                                            >\n                                                {accounts.data &&\n                                                    accounts.data.accounts\n                                                        .filter(account => {\n                                                            return (\n                                                                account.currency !==\n                                                                location.state.currency\n                                                            );\n                                                        })\n                                                        .map(account => {\n                                                            return (\n                                                                <MenuItem\n                                                                    key={account.id}\n                                                                    value={account.currency}\n                                                                >\n                                                                    {account.currency}\n                                                                </MenuItem>\n                                                            );\n                                                        })}\n                                            </Select>\n                                        </FormControl>\n                                    </ThemeProvider>\n                                    <div>\n                                        <ThemeProvider theme={theme}>\n                                            <Button\n                                                className={classes.dialogButton}\n                                                disabled={isSubmitting}\n                                                variant=\"contained\"\n                                                color=\"secondary\"\n                                                type=\"submit\"\n                                            >\n                                                Exchange\n                                            </Button>\n                                        </ThemeProvider>\n                                    </div>\n                                </Form>\n                            </div>\n                        )}\n                    </Formik>\n                </div>\n            </Dialog>\n        );\n    };\n\n    const renderDetailsDialog = (): JSX.Element | undefined => {\n        if (user && user.data && user.data.me) {\n            return (\n                <Dialog isOpen={openDetailsDialog} onClose={() => setOpenDetailsDialog(false)}>\n                    Beneficiary: {user.data.me.firstName} {user.data.me.lastName} <br />\n                    IBAN: {location.state.iban} <br />\n                    BIC: {location.state.bic}\n                    <div style={{ marginTop: 12 }}>\n                        <ThemeProvider theme={theme}>\n                            <Button\n                                className={classes.dialogButton}\n                                variant=\"contained\"\n                                color=\"secondary\"\n                                onClick={async () => {\n                                    try {\n                                        const response: ExecutionResult<ExecutionResultDataDefault> = await deleteAccount(\n                                            {\n                                                variables: {\n                                                    currency: location.state.currency,\n                                                },\n                                            },\n                                        );\n\n                                        if (response && response.data) {\n                                            setShowLoadingIcon(true);\n                                            setTimeout(async () => {\n                                                history.push('/dashboard');\n                                                history.go(0);\n                                            }, 3000);\n                                        }\n                                    } catch (error) {\n                                        const warning: string = error.message.split(':')[1];\n                                        setWarningMessage(warning);\n                                    }\n                                }}\n                            >\n                                Delete account\n                            </Button>\n                        </ThemeProvider>\n                    </div>\n                </Dialog>\n            );\n        }\n    };\n\n    const renderAlertMessage = (): JSX.Element | undefined => {\n        if (successMessage.length > 0) {\n            return (\n                <div style={{ display: 'flex', justifyContent: 'center', marginBottom: 12 }}>\n                    <SuccessMessage message={successMessage} />\n                </div>\n            );\n        } else if (errorMessage.length > 0) {\n            return (\n                <div style={{ display: 'flex', justifyContent: 'center', marginBottom: 12 }}>\n                    <ErrorMessage message={errorMessage} />\n                </div>\n            );\n        } else if (warningMessage.length > 0) {\n            return (\n                <div style={{ display: 'flex', justifyContent: 'center', marginBottom: 12 }}>\n                    <WarningMessage message={warningMessage} />\n                </div>\n            );\n        }\n    };\n\n    if (!showLoadingIcon) {\n        return (\n            <div className={classes.root}>\n                {renderAddDialog()}\n                {renderExchangeDialog()}\n                {renderDetailsDialog()}\n                {renderAlertMessage()}\n\n                <div style={{ position: 'absolute', right: 20 }}>\n                    <ThemeProvider theme={theme}>\n                        <Button\n                            color=\"secondary\"\n                            variant=\"contained\"\n                            style={{\n                                fontWeight: 'bold',\n                                letterSpacing: 1,\n                                textTransform: 'none',\n                            }}\n                            onClick={() => {\n                                if (hasCard) {\n                                    simulate();\n                                } else {\n                                    setErrorMessage(\n                                        \"Can't make this transaction. Please register a card first.\",\n                                    );\n                                }\n\n                                if (accountBalance < 0) {\n                                    setErrorMessage(\n                                        'You do not have the sufficient funds. Please top up your account.',\n                                    );\n                                }\n                            }}\n                        >\n                            Simulate\n                        </Button>\n                    </ThemeProvider>\n                </div>\n                <div className={classes.accountBalance}>\n                    {currencyIcon}\n                    {accountBalance}\n                </div>\n                <div className={classes.accountInfo}>\n                    <div>{currencyFullText}</div>\n                    <div style={{ width: 32 }}>{svg}</div>\n                    <div>{location.state.currency}</div>\n                </div>\n\n                <div className={classes.accountButtonsSection}>\n                    <ThemeProvider theme={theme}>\n                        <div>\n                            <IconButton\n                                className={classes.accountButton}\n                                aria-label=\"Add\"\n                                onClick={e => {\n                                    e.preventDefault();\n                                    setOpenAddDialog(true);\n                                }}\n                            >\n                                <AddIcon />\n                            </IconButton>\n                            <div className={classes.accountButtonText}>Add money</div>\n                        </div>\n                        <div>\n                            <IconButton\n                                className={classes.accountButton}\n                                aria-label=\"Exchange\"\n                                onClick={(e: MouseEvent<HTMLButtonElement>) => {\n                                    e.preventDefault();\n                                    setOpenExchangeDialog(true);\n                                }}\n                            >\n                                <SwapVert />\n                            </IconButton>\n                            <div className={classes.accountButtonText}>Exchange</div>\n                        </div>\n                        <div>\n                            <IconButton\n                                className={classes.accountButton}\n                                aria-label=\"Details\"\n                                onClick={(e: MouseEvent<HTMLButtonElement>) => {\n                                    e.preventDefault();\n                                    setOpenDetailsDialog(true);\n                                }}\n                            >\n                                <InfoOutlinedIcon />\n                            </IconButton>\n                            <div className={classes.accountButtonText}>Details</div>\n                        </div>\n                    </ThemeProvider>\n                </div>\n                <hr style={{ width: 480, marginTop: 24, color: '#fcfcfc' }} />\n                <Transactions\n                    account={data}\n                    cardNumber={hasCard ? cardNumber : undefined}\n                    currencyIcon={currencyIcon}\n                />\n            </div>\n        );\n    } else {\n        return (\n            <div\n                style={{\n                    position: 'fixed',\n                    top: '50%',\n                    left: '50%',\n                    transform: 'translate(-50%, -50%)',\n                }}\n            >\n                <Loading />\n            </div>\n        );\n    }\n};\n","import { createUseStyles } from 'react-jss';\nimport { ColorScheme } from '../../utils/theme';\n\nexport const useToolbarStyles = createUseStyles({\n    toolbar: {\n        // position: 'fixed',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '56px',\n        backgroundColor: ColorScheme.PRIMARY,\n    },\n    navigation: {\n        display: 'flex',\n        height: '100%',\n        alignItems: 'center',\n        padding: '0 1rem',\n    },\n    logo: {\n        textTransform: 'uppercase',\n        letterSpacing: 2,\n        marginLeft: '1.5rem',\n        '& a': {\n            color: ColorScheme.WHITE,\n            textDecoration: 'none',\n            fontSize: '1.5rem',\n        },\n    },\n    toggleButton: {},\n    navigationItems: {\n        '& ul': {\n            listStyle: 'none',\n            margin: 0,\n            padding: 0,\n            display: 'flex',\n            alignItems: 'center',\n        },\n        '& li': {\n            padding: '0 0.5rem',\n        },\n        '& a': {\n            color: ColorScheme.WHITE,\n            letterSpacing: 1,\n            textDecoration: 'none',\n            fontWeight: 'bold',\n        },\n        '& a:hover': {\n            color: ColorScheme.SECONDARY,\n        },\n        '& a:active': {\n            color: ColorScheme.SECONDARY,\n        },\n    },\n    navButton: {\n        fontSize: 14,\n        fontWeight: 'bold',\n        letterSpacing: 1,\n        marginLeft: '1rem',\n        height: 32,\n        width: 102,\n        borderRadius: 4,\n        border: 'none',\n        backgroundColor: ColorScheme.SECONDARY,\n        color: ColorScheme.WHITE,\n        cursor: 'pointer',\n        '&:hover': {\n            backgroundColor: ColorScheme.HOVER,\n        },\n        '&:focus': {\n            outline: 0,\n        },\n    },\n    spacer: {\n        flex: 1,\n    },\n    '@media (max-width: 768px)': {\n        navigationItems: {\n            display: 'none',\n        },\n    },\n    '@media (min-width: 769px)': {\n        toggleButton: {\n            display: 'none',\n        },\n        logo: {\n            marginLeft: 0,\n        },\n    },\n});\n","import { createUseStyles } from 'react-jss';\n\nexport const useDrawerToggleButtonStyles = createUseStyles({\n    toggleButton: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-around',\n        height: '24px',\n        width: '28px',\n        background: 'transparent',\n        cursor: 'pointer',\n        padding: 0,\n        border: 'none',\n        boxSizing: 'border-box',\n        '& :focus': {\n            outline: 'none',\n        },\n    },\n    toggleButtonLine: {\n        width: '30px',\n        height: '2px',\n        background: 'white',\n    },\n});\n","import React from 'react';\nimport { useDrawerToggleButtonStyles } from './DrawerToggleButton.style';\n\ninterface DrawerToggleButtonProps {\n    click(): void;\n}\n\nexport const DrawerToggleButton: React.FC<DrawerToggleButtonProps> = (\n    props: DrawerToggleButtonProps,\n) => {\n    const classes = useDrawerToggleButtonStyles();\n\n    return (\n        <button className={classes.toggleButton} onClick={props.click}>\n            <div className={classes.toggleButtonLine} />\n            <div className={classes.toggleButtonLine} />\n            <div className={classes.toggleButtonLine} />\n        </button>\n    );\n};\n","import React, { useState, useEffect, MouseEvent } from 'react';\nimport { useToolbarStyles } from './Toolbar.style';\nimport { DrawerToggleButton } from '../SideDrawer/DrawerToggleButton';\nimport {\n    useMeQuery,\n    useLogoutMutation,\n    MeQueryResult,\n    LogoutMutation,\n    LogoutMutationVariables,\n} from '../../generated/graphql';\nimport { useHistory } from 'react-router-dom';\nimport { setAccessToken } from '../../utils/accessToken';\nimport { MutationTuple } from '@apollo/react-hooks';\n\ninterface ToolbarProps {\n    drawerClickHandler(): void;\n}\n\nconst navigationItems: string[] = ['Dashboard', 'Settings'];\n\nexport const Toolbar: React.FC<ToolbarProps> = (props: ToolbarProps) => {\n    // GraphQL Mutations\n    const [logout, { client }]: MutationTuple<\n        LogoutMutation,\n        LogoutMutationVariables\n    > = useLogoutMutation();\n\n    // GraphQL Queries\n    const { data, loading }: MeQueryResult = useMeQuery();\n\n    // State\n    const [showAuthUserButtons, setShowAuthUserButtons] = useState<boolean>(false);\n\n    const history = useHistory();\n\n    const classes = useToolbarStyles();\n\n    // When the component mounts, if the user exists render the authenticated buttons, otherwise the non-authenticated buttons\n    // Authenticated user buttons -> Dashboard, Settings, Logout\n    // Non-authenticated user buttons -> Login, Sign Up\n    useEffect(() => {\n        if (!loading && data && data.me) {\n            setShowAuthUserButtons(true);\n        } else {\n            setShowAuthUserButtons(false);\n        }\n    }, [data, loading]);\n\n    const renderAuthUserButtons = (): JSX.Element => {\n        return (\n            <>\n                {navigationItems.map((item: string) => {\n                    let routeTo: string = '/';\n\n                    switch (item) {\n                        case 'Dashboard':\n                            routeTo = '/dashboard';\n                            break;\n                        case 'Settings':\n                            routeTo = '/settings';\n                            break;\n                    }\n                    return (\n                        <li key={item}>\n                            <a href={routeTo}>{item}</a>\n                        </li>\n                    );\n                })}\n                <button\n                    className={classes.navButton}\n                    onClick={async e => {\n                        e.preventDefault();\n                        await logout().then(() => history.push('/'));\n                        setAccessToken('');\n                        await client!.resetStore();\n                    }}\n                >\n                    Logout\n                </button>\n            </>\n        );\n    };\n\n    const renderNonAuthUserButtons = (): JSX.Element => {\n        return (\n            <>\n                <button\n                    className={classes.navButton}\n                    onClick={e => {\n                        e.preventDefault();\n                        history.push('/login');\n                    }}\n                >\n                    Login\n                </button>\n                <button\n                    className={classes.navButton}\n                    onClick={(e: MouseEvent<HTMLButtonElement>) => {\n                        e.preventDefault();\n                        history.push('/register');\n                    }}\n                >\n                    Sign Up\n                </button>\n            </>\n        );\n    };\n\n    return (\n        <header className={classes.toolbar}>\n            <nav className={classes.navigation}>\n                <div className={classes.toggleButton}>\n                    <DrawerToggleButton click={props.drawerClickHandler} />\n                </div>\n                <div className={classes.logo}>\n                    <a href=\"/\">\n                        <span role=\"img\" aria-label=\"logo\">\n                            🚀\n                        </span>\n                    </a>\n                </div>\n                <div className={classes.spacer} />\n                <div className={classes.navigationItems}>\n                    <ul>\n                        {!!showAuthUserButtons\n                            ? renderAuthUserButtons()\n                            : renderNonAuthUserButtons()}\n                    </ul>\n                </div>\n            </nav>\n        </header>\n    );\n};\n","import { createUseStyles } from 'react-jss';\nimport { ColorScheme } from '../../utils/theme';\n\nexport const useSideDrawerStyles = createUseStyles({\n    siderDrawer: {\n        height: '100%',\n        background: ColorScheme.WHITE,\n        boxShadow: '1px 0 7px rgba(0,0,0,0.5)',\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        width: '70%',\n        maxWidth: '280px',\n        zIndex: 200,\n        transform: 'translateX(-100%)',\n        transition: 'transform 0.3s ease-out',\n        '& ul': {\n            height: '100%',\n            listStyle: 'none',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n        },\n        '& li': {\n            margin: '0.5rem 0',\n        },\n        '& a': {\n            color: ColorScheme.PRIMARY,\n            textDecoration: 'none',\n            fontSize: '1.2rem',\n        },\n        '& a:hover': {\n            color: ColorScheme.ORANGE,\n        },\n        '& a:active': {\n            color: ColorScheme.ORANGE,\n        },\n    },\n    open: {\n        transform: 'translateX(0)',\n    },\n    '@media (min-width: 769px)': {\n        siderDrawer: {\n            display: 'none',\n        },\n    },\n});\n","import React, { useState, useEffect, MouseEvent } from 'react';\nimport { useSideDrawerStyles } from './SideDrawer.style';\nimport {\n    useMeQuery,\n    useLogoutMutation,\n    MeQueryResult,\n    LogoutMutationVariables,\n    LogoutMutation,\n} from '../../generated/graphql';\nimport { useHistory } from 'react-router-dom';\nimport { setAccessToken } from '../../utils/accessToken';\nimport { MutationTuple } from '@apollo/react-hooks';\n\nconst authUserNavigationItems: string[] = ['Dashboard', 'Settings', 'Logout'];\nconst nonAuthUserNavigationItems: string[] = ['Login', 'Sign Up'];\n\ninterface SideDrawerProps {\n    show: boolean;\n}\n\nexport const SideDrawer: React.FC<SideDrawerProps> = (props: SideDrawerProps) => {\n    // GraphQL Mutations\n    const [logout, { client }]: MutationTuple<\n        LogoutMutation,\n        LogoutMutationVariables\n    > = useLogoutMutation();\n\n    // GraphQL Queries\n    const { data, loading }: MeQueryResult = useMeQuery();\n\n    // State\n    const [showAuthUserNavigationItems, setShowAuthUserNavigationItems] = useState<boolean>(false);\n\n    const history = useHistory();\n    const classes = useSideDrawerStyles();\n\n    // When the component mounts, if the user exists render the authenticated buttons, otherwise the non-authenticated buttons\n    // Authenticated user buttons -> Dashboard, Settings, Logout\n    // Non-authenticated user buttons -> Login, Sign Up\n    useEffect(() => {\n        if (!loading && data && data.me) {\n            setShowAuthUserNavigationItems(true);\n        } else {\n            setShowAuthUserNavigationItems(false);\n        }\n    }, [data, loading]);\n\n    let drawerClasses: string = classes.siderDrawer;\n\n    if (props.show) {\n        drawerClasses = classes.siderDrawer + ' ' + classes.open;\n    }\n\n    const renderAuthUserNavigationItems = (): JSX.Element => {\n        return (\n            <>\n                {authUserNavigationItems.map(item => {\n                    let routeTo: string = '/';\n                    let logOutClicked: boolean = false;\n\n                    switch (item) {\n                        case 'Dashboard':\n                            routeTo = '/Dashboard';\n                            break;\n                        case 'Settings':\n                            routeTo = '/settings';\n                            break;\n                        case 'Logout':\n                            logOutClicked = true;\n                            break;\n                    }\n\n                    return (\n                        <li key={item}>\n                            <a\n                                href=\"/whatevs\"\n                                onClick={async (e: MouseEvent<Element, globalThis.MouseEvent>) => {\n                                    e.preventDefault();\n                                    if (logOutClicked) {\n                                        await logout().then(() => history.push('/'));\n                                        setAccessToken('');\n                                        await client!.resetStore();\n                                    }\n                                    history.push(routeTo);\n                                }}\n                            >\n                                {item}\n                            </a>\n                        </li>\n                    );\n                })}\n            </>\n        );\n    };\n\n    const renderNonAuthUserNavigationItems = (): JSX.Element => {\n        return (\n            <>\n                {nonAuthUserNavigationItems.map((item: string) => {\n                    let routeTo: string = '/';\n\n                    switch (item) {\n                        case 'Login':\n                            routeTo = '/login';\n                            break;\n                        case 'Sign Up':\n                            routeTo = '/register';\n                            break;\n                    }\n\n                    return (\n                        <li key={item}>\n                            <a\n                                href=\"/whatevs\"\n                                onClick={(\n                                    e: MouseEvent<HTMLAnchorElement, globalThis.MouseEvent>,\n                                ) => {\n                                    e.preventDefault();\n                                    history.push(routeTo);\n                                }}\n                            >\n                                {item}\n                            </a>\n                        </li>\n                    );\n                })}\n            </>\n        );\n    };\n\n    return (\n        <nav className={drawerClasses}>\n            <ul>\n                {!!showAuthUserNavigationItems\n                    ? renderAuthUserNavigationItems()\n                    : renderNonAuthUserNavigationItems()}\n            </ul>\n        </nav>\n    );\n};\n","import { createUseStyles } from 'react-jss';\n\nexport const useBackdropStyles = createUseStyles({\n    backdrop: {\n        position: 'fixed',\n        width: '100%',\n        height: '100%',\n        top: 0,\n        left: 0,\n        background: 'rgba(0,0,0,0.3)',\n        zIndex: 100,\n    },\n});\n","import React from 'react';\nimport { useBackdropStyles } from './Backdrop.style';\n\ninterface BackdropProps {\n    click(): void;\n}\n\nexport const Backdrop: React.FC<BackdropProps> = (props: BackdropProps) => {\n    const classes = useBackdropStyles();\n\n    return <div className={classes.backdrop} onClick={props.click} />;\n};\n","import * as yup from 'yup';\n\nexport const changePasswordValidationSchema = yup.object({\n    oldPassword: yup.string(),\n    newPassword: yup.lazy(value =>\n        !value ? yup.string() : yup.string().min(6, 'Password must be at least 6 characters'),\n    ),\n    confirmPassword: yup.string().oneOf([yup.ref('newPassword')], 'Passwords do not match'),\n});\n","import React, { useState, useEffect } from 'react';\nimport {\n    useMeQuery,\n    MeQueryResult,\n    useAccountsQuery,\n    AccountsQueryResult,\n    Account,\n    useUpdatePasswordMutation,\n    UpdatePasswordMutation,\n    UpdatePasswordMutationVariables,\n    DestroyAccountMutation,\n    DestroyAccountMutationVariables,\n    LogoutMutationVariables,\n    useLogoutMutation,\n    LogoutMutation,\n    useDestroyAccountMutation,\n} from '../../generated/graphql';\nimport {\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    ThemeProvider,\n    Button,\n} from '@material-ui/core';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport AccountBalanceIcon from '@material-ui/icons/AccountBalance';\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\nimport InfoIcon from '@material-ui/icons/Info';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport { Title } from '../../components/Typography/Title';\nimport { Dialog } from '../../components/Dialog/Dialog';\nimport { ReactComponent as Euro } from '../../assets/world.svg';\nimport { ReactComponent as Dollar } from '../../assets/flag.svg';\nimport { ReactComponent as Pound } from '../../assets/uk.svg';\nimport { useHistory } from 'react-router-dom';\nimport { MutationTuple } from '@apollo/react-hooks';\nimport { Formik, Form } from 'formik';\nimport { FormTextField } from '../../components/Forms/FormTextField';\nimport { theme, ColorScheme } from '../../utils/theme';\nimport { SuccessMessage, ErrorMessage } from '../../components/Alerts/AlertMessage';\nimport { changePasswordValidationSchema } from '../../schemas /changePasswordValidationSchema';\nimport { ExecutionResultDataDefault, ExecutionResult } from 'graphql/execution/execute';\nimport { setAccessToken } from '../../utils/accessToken';\nimport { Loading } from '../../components/Loading/Loading';\n\nexport const Settings: React.FC = () => {\n    // GraphQL Queries\n    const { data }: MeQueryResult = useMeQuery();\n    const accounts: AccountsQueryResult = useAccountsQuery();\n\n    // GraphQL Mutations\n    const [updatePassword]: MutationTuple<\n        UpdatePasswordMutation,\n        UpdatePasswordMutationVariables\n    > = useUpdatePasswordMutation();\n    const [destroyAccount]: MutationTuple<\n        DestroyAccountMutation,\n        DestroyAccountMutationVariables\n    > = useDestroyAccountMutation();\n    const [logout, { client }]: MutationTuple<\n        LogoutMutation,\n        LogoutMutationVariables\n    > = useLogoutMutation();\n\n    // State\n    const [showLoadingIcon, setShowLoadingIcon] = useState<boolean>(false);\n    const [openPersonalDetailsDialog, setOpenPersonalDetailsDialog] = useState<boolean>(false);\n    const [openAccountDetailsDialog, setOpenAccountDetailsDialog] = useState<boolean>(false);\n    const [openChangePasswordDialog, setOpenChangePasswordDialog] = useState<boolean>(false);\n    const [openAboutDialog, setOpenAboutDialog] = useState<boolean>(false);\n    const [successMessage, setSuccessMessage] = useState<string>('');\n    const [errorMessage, setErrorMessage] = useState<string>('');\n    const [userBirthDate, setUserBirthDate] = useState<string>('');\n\n    const history = useHistory();\n\n    // When the component mounts, format the logged in users date of birth\n    useEffect(() => {\n        if (data && data.me) {\n            setUserBirthDate(new Date(Date.parse(data.me.dateOfBirth)).toLocaleDateString());\n        }\n    }, [data]);\n\n    const renderPersonalDetailsDialog = (): JSX.Element => {\n        return (\n            <Dialog\n                isOpen={openPersonalDetailsDialog}\n                onClose={() => setOpenPersonalDetailsDialog(false)}\n            >\n                <Title title=\"Personal details\" fontSize={18} />\n                <div style={{ marginTop: 12 }}>\n                    <p style={{ color: 'lightgrey' }}>Full name & date of birth</p>\n                    {data &&\n                        data.me &&\n                        data.me.firstName + ' ' + data.me.lastName + ', ' + userBirthDate}\n                    <p style={{ color: 'lightgrey' }}>Residential address</p>\n                    {data && data.me && data.me.streetAddress} <br />\n                    {data && data.me && data.me.postCode + ' ' + data.me.city} <br />\n                    {data && data.me && data.me.country}\n                    <p style={{ color: 'lightgrey' }}>Email</p>\n                    {data && data.me && data.me.email}\n                </div>\n            </Dialog>\n        );\n    };\n\n    const renderAccountDetailsDialog = (): JSX.Element => {\n        return (\n            <Dialog\n                isOpen={openAccountDetailsDialog}\n                onClose={() => setOpenAccountDetailsDialog(false)}\n            >\n                <Title title=\"Account details\" fontSize={18} />\n                <div style={{ marginTop: 12 }}>\n                    <p style={{ color: 'lightgrey' }}>Active accounts</p>\n                    <List component=\"nav\" aria-label=\"active-accounts\">\n                        {accounts.data &&\n                            accounts.data.accounts.map((account: Account) => {\n                                let svg: any;\n                                let currencyFullText: string = '';\n                                let balance: string = '';\n\n                                switch (account.currency) {\n                                    case 'EUR':\n                                        svg = <Euro />;\n                                        currencyFullText = 'Euro';\n                                        balance = '€' + account.balance;\n                                        break;\n                                    case 'USD':\n                                        svg = <Dollar />;\n                                        currencyFullText = 'US Dollar';\n                                        balance = '$' + account.balance;\n                                        break;\n                                    case 'GBP':\n                                        svg = <Pound />;\n                                        currencyFullText = 'British Pound';\n                                        balance = '£' + account.balance;\n                                        break;\n                                }\n\n                                return (\n                                    <ListItem\n                                        key={account.id}\n                                        button\n                                        onClick={() =>\n                                            history.push({\n                                                pathname: `/accounts/${account.id}`,\n                                                state: account,\n                                            })\n                                        }\n                                    >\n                                        <ListItemIcon>\n                                            <div style={{ width: 32 }}>{svg}</div>\n                                        </ListItemIcon>\n                                        <ListItemText\n                                            primary={currencyFullText}\n                                            secondary={account.currency}\n                                        />\n                                        {balance}\n                                    </ListItem>\n                                );\n                            })}\n                    </List>\n                </div>\n            </Dialog>\n        );\n    };\n\n    const renderChangePasswordDialog = (): JSX.Element => {\n        return (\n            <Dialog\n                isOpen={openChangePasswordDialog}\n                onClose={() => setOpenChangePasswordDialog(false)}\n            >\n                <Title title=\"Change password\" fontSize={18} />\n                <div style={{ marginTop: 12 }}>\n                    <Formik\n                        initialValues={{ oldPassword: '', newPassword: '', confirmPassword: '' }}\n                        validationSchema={changePasswordValidationSchema}\n                        onSubmit={async (data, { setSubmitting, resetForm }) => {\n                            setSubmitting(true);\n\n                            try {\n                                const response = await updatePassword({\n                                    variables: {\n                                        oldPassword: data.oldPassword,\n                                        newPassword: data.newPassword,\n                                    },\n                                });\n\n                                if (response && response.data) {\n                                    setSubmitting(false);\n                                    console.log(response.data);\n                                    setSuccessMessage('Password successfully changed!');\n                                    setOpenChangePasswordDialog(false);\n                                    resetForm();\n                                }\n                            } catch (error) {\n                                const errorMessage = error.message.split(':')[1];\n                                setErrorMessage(errorMessage);\n                                setSubmitting(false);\n                            }\n                        }}\n                    >\n                        {({ isSubmitting }) => (\n                            <div>\n                                <Form>\n                                    <FormTextField\n                                        name=\"oldPassword\"\n                                        placeholder=\"Old password\"\n                                        type=\"password\"\n                                    />\n                                    <div style={{ marginTop: 8 }}>\n                                        <FormTextField\n                                            name=\"newPassword\"\n                                            placeholder=\"New password\"\n                                            type=\"password\"\n                                        />\n                                    </div>\n                                    <div style={{ marginTop: 8 }}>\n                                        <FormTextField\n                                            name=\"confirmPassword\"\n                                            placeholder=\"Confirm new password\"\n                                            type=\"password\"\n                                        />\n                                    </div>\n                                    <div style={{ marginTop: 8 }}>\n                                        <ThemeProvider theme={theme}>\n                                            <Button\n                                                disabled={isSubmitting}\n                                                variant=\"contained\"\n                                                color=\"secondary\"\n                                                type=\"submit\"\n                                            >\n                                                Change password\n                                            </Button>\n                                        </ThemeProvider>\n                                    </div>\n                                </Form>\n                            </div>\n                        )}\n                    </Formik>\n                </div>\n            </Dialog>\n        );\n    };\n\n    const renderAboutDialog = (): JSX.Element => {\n        return (\n            <Dialog isOpen={openAboutDialog} onClose={() => setOpenAboutDialog(false)}>\n                <Title title=\"About this website\" fontSize={18} />\n                <div style={{ marginTop: 12 }}>Libraries used:</div>\n                <div style={{ marginTop: 12 }}>\n                    Server side technologies\n                    <ul>\n                        <li>\n                            <a\n                                href=\"https://www.apollographql.com/docs/apollo-server/\"\n                                style={{ textDecoration: 'none', color: ColorScheme.SECONDARY }}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                Apollo Server\n                            </a>\n                        </li>\n                        <li>\n                            <a\n                                href=\"https://www.npmjs.com/package/bcryptjs\"\n                                style={{ textDecoration: 'none', color: ColorScheme.SECONDARY }}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                bcryptjs\n                            </a>{' '}\n                            for password hashing\n                        </li>\n                        <li>\n                            <a\n                                href=\"https://www.npmjs.com/package/cors\"\n                                style={{ textDecoration: 'none', color: ColorScheme.SECONDARY }}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                cors\n                            </a>{' '}\n                            for cross origin resource sharing\n                        </li>\n                        <li>\n                            <a\n                                href=\"https://expressjs.com/\"\n                                style={{ textDecoration: 'none', color: ColorScheme.SECONDARY }}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                Express\n                            </a>\n                        </li>\n                        <li>\n                            <a\n                                href=\"https://graphql.org/\"\n                                style={{ textDecoration: 'none', color: ColorScheme.SECONDARY }}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                GraphQL\n                            </a>\n                        </li>\n                        <li>\n                            <a\n                                href=\"https://www.npmjs.com/package/jsonwebtoken\"\n                                style={{ textDecoration: 'none', color: ColorScheme.SECONDARY }}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                jsonwebtoken\n                            </a>\n                        </li>\n                        <li>\n                            <a\n                                href=\"https://typegraphql.com/\"\n                                style={{ textDecoration: 'none', color: ColorScheme.SECONDARY }}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                TypeGraphQL\n                            </a>{' '}\n                            for GraphQLI API TypeScript integration\n                        </li>\n                        <li>\n                            <a\n                                href=\"https://typeorm.io/#/\"\n                                style={{ textDecoration: 'none', color: ColorScheme.SECONDARY }}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                TypeORM\n                            </a>{' '}\n                            - Typescript ORM to use with databases (PostgreSQL in my case)\n                        </li>\n                        <li>\n                            <a\n                                href=\"https://www.typescriptlang.org/\"\n                                style={{ textDecoration: 'none', color: ColorScheme.SECONDARY }}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                TypeScript\n                            </a>\n                        </li>\n                    </ul>\n                    Client side technologies\n                    <ul>\n                        <li>\n                            <a\n                                href=\"https://www.apollographql.com/docs/react/api/react-hooks/\"\n                                style={{ textDecoration: 'none', color: ColorScheme.SECONDARY }}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                Apollo React Hooks\n                            </a>\n                        </li>\n                        <li>\n                            <a\n                                href=\"https://fontawesome.com/how-to-use/on-the-web/using-with/react\"\n                                style={{ textDecoration: 'none', color: ColorScheme.SECONDARY }}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                FontAwesome Icons\n                            </a>\n                        </li>\n                        <li>\n                            <a\n                                href=\"https://material-ui.com/\"\n                                style={{ textDecoration: 'none', color: ColorScheme.SECONDARY }}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                Material UI\n                            </a>\n                        </li>\n                        <li>\n                            <a\n                                href=\"https://recharts.org/en-US/\"\n                                style={{ textDecoration: 'none', color: ColorScheme.SECONDARY }}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                Recharts\n                            </a>{' '}\n                            - For data visualization\n                        </li>\n                        <li>\n                            <a\n                                href=\"https://jaredpalmer.com/formik/\"\n                                style={{ textDecoration: 'none', color: ColorScheme.SECONDARY }}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                Formik\n                            </a>{' '}\n                            - For building Forms\n                        </li>\n                        <li>\n                            <a\n                                href=\"https://github.com/jquense/yup\"\n                                style={{ textDecoration: 'none', color: ColorScheme.SECONDARY }}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                Yup\n                            </a>{' '}\n                            - For client sid form validation\n                        </li>\n                    </ul>\n                </div>\n            </Dialog>\n        );\n    };\n\n    const renderAlertMessage = (): JSX.Element | undefined => {\n        if (successMessage.length > 0) {\n            return (\n                <div style={{ display: 'flex', justifyContent: 'center', marginBottom: 12 }}>\n                    <SuccessMessage message={successMessage} />\n                </div>\n            );\n        } else if (errorMessage.length > 0) {\n            return (\n                <div style={{ display: 'flex', justifyContent: 'center', marginBottom: 12 }}>\n                    <ErrorMessage message={errorMessage} />\n                </div>\n            );\n        }\n    };\n\n    if (!showLoadingIcon) {\n        return (\n            <>\n                <div>\n                    {renderPersonalDetailsDialog()}\n                    {renderAccountDetailsDialog()}\n                    {renderChangePasswordDialog()}\n                    {renderAboutDialog()}\n                    {renderAlertMessage()}\n                    <div style={{ textAlign: 'center' }}>\n                        <AccountCircleIcon fontSize={'large'} />\n                        <Title\n                            title={\n                                !!data && data.me ? data.me.firstName + ' ' + data.me.lastName : ''\n                            }\n                            fontSize={18}\n                        />\n                    </div>\n                    <hr style={{ width: '424px' }} />\n                    <div style={{ width: '424px', margin: '0 auto' }}>\n                        <Title title=\"Profile\" fontSize={14} />\n                        <List component=\"nav\" aria-label=\"profile\">\n                            <ListItem button onClick={() => setOpenPersonalDetailsDialog(true)}>\n                                <ListItemIcon style={{ color: ColorScheme.PRIMARY }}>\n                                    <AccountCircleIcon />\n                                </ListItemIcon>\n                                <ListItemText primary=\"Personal details\" />\n                            </ListItem>\n                            <ListItem button onClick={() => setOpenAccountDetailsDialog(true)}>\n                                <ListItemIcon style={{ color: ColorScheme.PRIMARY }}>\n                                    <AccountBalanceIcon />\n                                </ListItemIcon>\n                                <ListItemText primary=\"Account details\" />\n                            </ListItem>\n                        </List>\n                    </div>\n                    <hr style={{ width: '424px' }} />\n                    <div style={{ width: '424px', margin: '0 auto' }}>\n                        <Title title=\"Security\" fontSize={14} />\n                        <List component=\"nav\" aria-label=\"profile\">\n                            <ListItem button onClick={() => setOpenChangePasswordDialog(true)}>\n                                <ListItemIcon style={{ color: ColorScheme.PRIMARY }}>\n                                    <VpnKeyIcon />\n                                </ListItemIcon>\n                                <ListItemText primary=\"Change password\" />\n                            </ListItem>\n                        </List>\n                    </div>\n                    <hr style={{ width: '424px' }} />\n                    <div style={{ width: '424px', margin: '0 auto' }}>\n                        <Title title=\"About us\" fontSize={14} />\n                        <List component=\"nav\" aria-label=\"profile\">\n                            <ListItem button onClick={() => setOpenAboutDialog(true)}>\n                                <ListItemIcon style={{ color: ColorScheme.PRIMARY }}>\n                                    <InfoIcon />\n                                </ListItemIcon>\n                                <ListItemText primary=\"About this website\" />\n                            </ListItem>\n                        </List>\n                    </div>\n                    <hr style={{ width: '424px' }} />\n                    <div style={{ width: '424px', margin: '0 auto' }}>\n                        <List component=\"nav\" aria-label=\"profile\">\n                            <ListItem\n                                button\n                                onClick={async () => {\n                                    try {\n                                        const response: ExecutionResult<ExecutionResultDataDefault> = await destroyAccount();\n\n                                        if (response && response.data) {\n                                            setShowLoadingIcon(true);\n                                            setTimeout(async () => {\n                                                await logout().then(() => history.push('/bye'));\n                                                setAccessToken('');\n                                                client!.resetStore();\n                                            }, 3000);\n                                        }\n                                    } catch (error) {\n                                        const errorMessage: string = error.message.split(':')[1];\n                                        console.log(errorMessage);\n                                    }\n                                }}\n                            >\n                                <ListItemIcon style={{ color: ColorScheme.PRIMARY }}>\n                                    <DeleteForeverIcon />\n                                </ListItemIcon>\n                                <ListItemText primary=\"Destroy account\" />\n                            </ListItem>\n                        </List>\n                    </div>\n                </div>\n            </>\n        );\n    } else {\n        return (\n            <div\n                style={{\n                    position: 'fixed',\n                    top: '50%',\n                    left: '50%',\n                    transform: 'translate(-50%, -50%)',\n                }}\n            >\n                <Loading />\n            </div>\n        );\n    }\n};\n","import { createUseStyles } from 'react-jss';\n\nexport const useChartStyles = createUseStyles({\n    root: {\n        width: '100%',\n        height: '320px',\n    },\n    spending: {\n        display: 'flex',\n        justifyContent: 'center',\n    },\n});\n","import React from 'react';\nimport {\n    ResponsiveContainer,\n    AreaChart,\n    Area,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n    Legend,\n} from 'recharts';\nimport {\n    useTransactionsQuery,\n    TransactionsQueryResult,\n    Transaction,\n} from '../../generated/graphql';\nimport { useChartStyles } from './Chart.style';\n\ninterface ChartProps {\n    currency: string;\n}\n\nexport const Chart: React.FC<ChartProps> = ({ currency }) => {\n    // GraphQL queries\n    const { data }: TransactionsQueryResult = useTransactionsQuery({\n        variables: { currency: currency },\n    });\n\n    const classes = useChartStyles();\n\n    return (\n        <>\n            <div className={classes.root}>\n                <div className={classes.spending}>Spending (this month)</div>\n                <ResponsiveContainer width=\"100%\">\n                    <AreaChart\n                        data={\n                            !!data\n                                ? data.transactions.map((transaction: Transaction) => {\n                                      return {\n                                          date: new Date(\n                                              Date.parse(transaction.date),\n                                          ).toLocaleDateString(),\n                                          type: transaction.transactionType,\n                                          amount: transaction.amount,\n                                      };\n                                  })\n                                : []\n                        }\n                        margin={{\n                            top: 24,\n                            right: 30,\n                            left: 20,\n                            bottom: 5,\n                        }}\n                    >\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"date\" />\n                        <YAxis />\n                        <Tooltip />\n                        <Legend />\n                        <Area type=\"monotone\" dataKey=\"amount\" stroke=\"#29AABB\" fill=\"#29AABB\" />\n                        <Area type=\"monotone\" dataKey=\"type\" stroke=\"#F15742\" />\n                    </AreaChart>\n                </ResponsiveContainer>\n            </div>\n        </>\n    );\n};\n","import { createUseStyles } from 'react-jss';\n\nexport const useAccountsCardStyles = createUseStyles({\n    root: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n    },\n    svg: {\n        width: 32,\n    },\n});\n\nexport const useNoAccountsCardStyles = createUseStyles({\n    root: {\n        display: 'flex',\n        marginTop: '62px',\n        justifyContent: 'center',\n    },\n});\n","import React, { MouseEvent } from 'react';\nimport { IconButton, Typography, Divider, Button, ThemeProvider } from '@material-ui/core';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport AddIcon from '@material-ui/icons/Add';\nimport { Title } from '../Typography/Title';\nimport { ColorScheme, theme } from '../../utils/theme';\nimport { useAccountsCardStyles, useNoAccountsCardStyles } from './styles/AccountsCard.style';\n\ninterface AccountsCardProps {\n    svg: any | string;\n    currencyIcon: string;\n    fullCurrencyText: string;\n    balance: number;\n    iban: string;\n    onAccountClicked(e: MouseEvent<HTMLButtonElement>): void;\n}\n\ninterface NoAccountCardProps {\n    onCreateNewAccountClicked(e: MouseEvent<HTMLButtonElement>): void;\n}\n\nexport const AccountsCard: React.FC<AccountsCardProps> = ({\n    svg,\n    currencyIcon,\n    fullCurrencyText,\n    balance,\n    iban,\n    onAccountClicked,\n}) => {\n    const classes = useAccountsCardStyles();\n\n    return (\n        <>\n            <div className={classes.root}>\n                <div className={classes.svg}>{svg}</div>\n                <Title title={fullCurrencyText} fontSize={18} />\n                <div>\n                    <IconButton style={{ color: ColorScheme.PRIMARY }} onClick={onAccountClicked}>\n                        <NavigateNextIcon fontSize=\"small\" />\n                    </IconButton>\n                </div>\n            </div>\n            <Typography style={{ margin: '0 auto', marginTop: '24px' }} component=\"p\" variant=\"h4\">\n                {currencyIcon}\n                {balance}\n            </Typography>\n            <Divider style={{ marginTop: 24 }} light />\n            <Typography\n                style={{\n                    marginTop: '14px',\n                    letterSpacing: 1,\n                    color: 'rgba(0, 0, 0, 0.3)',\n                }}\n                component=\"p\"\n            >\n                {!!iban ? iban : 'XXXX APL0 0099 YYYY ZZZZ 78'}\n            </Typography>\n        </>\n    );\n};\n\nexport const NoAccountsCard: React.FC<NoAccountCardProps> = ({ onCreateNewAccountClicked }) => {\n    const classes = useNoAccountsCardStyles();\n    return (\n        <div className={classes.root}>\n            <ThemeProvider theme={theme}>\n                <Button\n                    style={{ fontWeight: 'bold', textTransform: 'none', letterSpacing: 1 }}\n                    color=\"primary\"\n                    variant=\"contained\"\n                    startIcon={<AddIcon />}\n                    onClick={onCreateNewAccountClicked}\n                >\n                    Create new account\n                </Button>\n            </ThemeProvider>\n        </div>\n    );\n};\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"defs\", null, React.createElement(\"style\", null, \".a{opacity:0;}.b{fill:#fff;}.c{fill:#ff5f00;}.d{fill:#eb001b;}.e{fill:#f79e1b;}\"));\n\nvar _ref3 =\n/*#__PURE__*/\nReact.createElement(\"title\", null, \"Asset 1\");\n\nvar _ref4 =\n/*#__PURE__*/\nReact.createElement(\"g\", {\n  className: \"a\"\n}, React.createElement(\"rect\", {\n  className: \"b\",\n  width: 131.39,\n  height: 86.9\n}));\n\nvar _ref5 =\n/*#__PURE__*/\nReact.createElement(\"rect\", {\n  className: \"c\",\n  x: 48.37,\n  y: 15.14,\n  width: 34.66,\n  height: 56.61\n});\n\nvar _ref6 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  className: \"d\",\n  d: \"M51.94,43.45a35.94,35.94,0,0,1,13.75-28.3,36,36,0,1,0,0,56.61A35.94,35.94,0,0,1,51.94,43.45Z\"\n});\n\nvar _ref7 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  className: \"e\",\n  d: \"M120.5,65.76V64.6H121v-.24h-1.19v.24h.47v1.16Zm2.31,0v-1.4h-.36l-.42,1-.42-1h-.36v1.4h.26V64.7l.39.91h.27l.39-.91v1.06Z\"\n});\n\nvar _ref8 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  className: \"e\",\n  d: \"M123.94,43.45a36,36,0,0,1-58.25,28.3,36,36,0,0,0,0-56.61,36,36,0,0,1,58.25,28.3Z\"\n});\n\nvar SvgMcSymbol = function SvgMcSymbol(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 131.39 86.9\",\n    ref: svgRef\n  }, props), _ref2, title === undefined ? _ref3 : title ? React.createElement(\"title\", null, title) : null, _ref4, _ref5, _ref6, _ref7, _ref8);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgMcSymbol, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/mc_symbol.543bc93b.svg\";\nexport { ForwardRef as ReactComponent };","import { createUseStyles } from 'react-jss';\n\nexport const useApolloCardStyles = createUseStyles({\n    cardTop: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n    },\n    cardTypeIcon: {\n        width: 64,\n    },\n    cardNumber: {\n        fontSize: 18,\n        letterSpacing: 10,\n        textAlign: 'center',\n        marginTop: 32,\n        marginBottom: 24,\n    },\n    cardValidThruLabel: {\n        textTransform: 'uppercase',\n        letterSpacing: 0.5,\n        fontSize: 12,\n        opacity: 0.9,\n    },\n    cardCvvLabel: {\n        textTransform: 'uppercase',\n        letterSpacing: 0.5,\n        marginLeft: 12,\n        fontSize: 12,\n        opacity: 0.9,\n    },\n});\n","import React, { MouseEvent } from 'react';\nimport { ThemeProvider, Button } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport { theme } from '../../utils/theme';\nimport { ReactComponent as MasterCard } from '../../assets/mc_symbol.svg';\nimport { useApolloCardStyles } from './styles/ApolloCard.style';\n\ninterface ApolloCardProps {\n    cardNumber?: string;\n    validThru?: string;\n    cvv?: number;\n    onCreateNewCardClicked?(e: MouseEvent<HTMLButtonElement>): void;\n}\n\nexport const ApolloCard: React.FC<ApolloCardProps> = ({ cardNumber, validThru, cvv }) => {\n    const classes = useApolloCardStyles();\n\n    return (\n        <>\n            <div className={classes.cardTop}>\n                <div>\n                    <span role=\"img\" aria-label=\"logo\">\n                        🚀\n                    </span>\n                </div>\n                <div className={classes.cardTypeIcon}>\n                    <MasterCard />\n                </div>\n            </div>\n            <div className={classes.cardNumber}>{cardNumber}</div>\n            <div style={{ display: 'flex' }}>\n                <div>\n                    <div className={classes.cardValidThruLabel}>valid thru</div>\n                    <div>{validThru}</div>\n                </div>\n                <div>\n                    <div className={classes.cardCvvLabel}>cvv</div>\n                    <div style={{ marginLeft: 12 }}>{cvv}</div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport const NoApolloCard: React.FC<ApolloCardProps> = ({ onCreateNewCardClicked }) => {\n    return (\n        <div\n            style={{\n                display: 'flex',\n                marginTop: '62px',\n                justifyContent: 'center',\n            }}\n        >\n            <ThemeProvider theme={theme}>\n                <Button\n                    style={{ fontWeight: 'bold', textTransform: 'none', letterSpacing: 1 }}\n                    color=\"primary\"\n                    variant=\"contained\"\n                    startIcon={<AddIcon />}\n                    onClick={onCreateNewCardClicked}\n                >\n                    Create new card\n                </Button>\n            </ThemeProvider>\n        </div>\n    );\n};\n","import { makeStyles } from '@material-ui/core';\nimport { ColorScheme } from '../../../utils/theme';\n\nexport const useDashboardStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n    },\n    content: {\n        flexGrow: 1,\n        height: '100vh',\n        overflow: 'auto',\n    },\n    container: {\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(4),\n    },\n    paper: {\n        fontWeight: 'bold',\n        padding: theme.spacing(2),\n        display: 'flex',\n        overflow: 'auto',\n        flexDirection: 'column',\n        borderRadius: 8,\n    },\n    fixedHeight: {\n        height: 240,\n    },\n    accountCardHeight: {\n        height: 172,\n    },\n    chart: {\n        height: '100%',\n    },\n    apolloCard: {\n        backgroundColor: ColorScheme.ORANGE,\n        color: ColorScheme.WHITE,\n    },\n}));\n","import React, { useState, useEffect, MouseEvent, ChangeEvent } from 'react';\nimport {\n    Container,\n    Grid,\n    Paper,\n    List,\n    ListItemText,\n    ListItem,\n    ListItemIcon,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    ThemeProvider,\n} from '@material-ui/core';\nimport { Chart } from '../../components/Charts/Chart';\nimport { Title } from '../../components/Typography/Title';\nimport { ReactComponent as Euro } from '../../assets/world.svg';\nimport { ReactComponent as Dollar } from '../../assets/flag.svg';\nimport { ReactComponent as Pound } from '../../assets/uk.svg';\nimport {\n    useAccountsQuery,\n    useCreateAccountMutation,\n    AccountsDocument,\n    useCreateCardMutation,\n    useCardsQuery,\n    CardsDocument,\n    AccountsQueryResult,\n    CardsQueryResult,\n    CreateAccountMutation,\n    CreateAccountMutationVariables,\n    CreateCardMutation,\n    CreateCardMutationVariables,\n    Account,\n} from '../../generated/graphql';\nimport { Loading } from '../../components/Loading/Loading';\nimport { useHistory } from 'react-router-dom';\nimport { AccountsCard, NoAccountsCard } from '../../components/Cards/AccountsCard';\nimport { Currency } from '../../utils/currencies';\nimport { Dialog } from '../../components/Dialog/Dialog';\nimport { NoApolloCard, ApolloCard } from '../../components/Cards/ApolloCard';\nimport { MutationTuple } from '@apollo/react-hooks';\nimport { ExecutionResult } from 'graphql';\nimport { theme } from '../../utils/theme';\nimport { useDashboardStyles } from './styles/Dashboard.style';\n\nconst GLOBAL_CURRENCIES: string[] = ['EUR', 'USD', 'GBP'];\n\nexport const Dashboard: React.FC = () => {\n    // GraphQL Mutations\n    const [createAccount]: MutationTuple<\n        CreateAccountMutation,\n        CreateAccountMutationVariables\n    > = useCreateAccountMutation();\n    const [createCard]: MutationTuple<\n        CreateCardMutation,\n        CreateCardMutationVariables\n    > = useCreateCardMutation();\n\n    // GraphQL Queries\n    const { data, loading }: AccountsQueryResult = useAccountsQuery();\n    const cards: CardsQueryResult = useCardsQuery();\n\n    // State\n    const [currencies, setCurrencies] = useState<string[]>(['']);\n    const [analyticsAccount, setAnalyticsAccount] = useState<string>('');\n    const [totalBalance, setTotalBalance] = useState<number>(0);\n    const [openDialog, setOpenDialog] = useState<boolean>(false);\n\n    const history = useHistory();\n\n    const classes = useDashboardStyles();\n\n    const accountCardHeightPaper = classes.paper + ' ' + classes.accountCardHeight;\n    const apolloCardPaper =\n        classes.paper + ' ' + classes.accountCardHeight + ' ' + classes.apolloCard;\n    const chartPaper = classes.paper + ' ' + classes.chart;\n\n    // When the component mounts, update the total balance for the current user\n    // and store the currency accounts in the state array\n    useEffect(() => {\n        let currencies: string[] = [];\n        let balance: number = 0;\n        if (data) {\n            data.accounts.forEach((account: Account) => {\n                // apply conversion rates\n                if (account.currency === 'EUR') {\n                    balance += Math.round(account.balance / 1.13);\n                }\n\n                if (account.currency === 'USD') {\n                    balance += Math.round(account.balance / 1.25);\n                }\n\n                if (account.currency === 'GBP') {\n                    balance += Math.round(account.balance * 1);\n                }\n                currencies.push(account.currency);\n            });\n        }\n        setTotalBalance(balance);\n        setCurrencies(currencies);\n    }, [loading, data]);\n\n    // When the component mounts, if an exists, set the analytics to display data for the first account\n    useEffect(() => {\n        if (currencies.length > 0) {\n            setAnalyticsAccount(currencies[0]);\n        }\n    }, [currencies]);\n\n    if (!data) {\n        return (\n            <div\n                style={{\n                    position: 'fixed',\n                    top: '50%',\n                    left: '50%',\n                    transform: 'translate(-50%, -50%)',\n                }}\n            >\n                <Loading />\n            </div>\n        );\n    }\n\n    const determineCurrencyIcon = (c: string): JSX.Element | undefined => {\n        switch (c) {\n            case 'EUR':\n                return <Euro />;\n            case 'USD':\n                return <Dollar />;\n            case 'GBP':\n                return <Pound />;\n        }\n        return undefined;\n    };\n\n    const renderDialog = (): JSX.Element => {\n        return (\n            <Dialog isOpen={openDialog} onClose={() => setOpenDialog(false)}>\n                <List>\n                    {GLOBAL_CURRENCIES.map((currency: string) => (\n                        <ListItem\n                            button\n                            key={currency}\n                            onClick={async () => {\n                                try {\n                                    const response: ExecutionResult<CreateAccountMutation> = await createAccount(\n                                        {\n                                            variables: {\n                                                currency: currency,\n                                            },\n                                            refetchQueries: [\n                                                {\n                                                    query: AccountsDocument,\n                                                    variables: {},\n                                                },\n                                                {\n                                                    query: CardsDocument,\n                                                    variables: {},\n                                                },\n                                            ],\n                                        },\n                                    );\n\n                                    if (response && response.data) {\n                                        setAnalyticsAccount(currency);\n                                        setOpenDialog(false);\n                                    }\n                                } catch (error) {\n                                    const errorMessage: string = error.message.split(':')[1];\n                                    console.log(errorMessage);\n                                }\n                            }}\n                        >\n                            <ListItemIcon>\n                                <div style={{ width: 32 }}>{determineCurrencyIcon(currency)}</div>\n                            </ListItemIcon>\n                            <ListItemText primary={currency} />\n                        </ListItem>\n                    ))}\n                </List>\n            </Dialog>\n        );\n    };\n\n    const handleAccountClicked = (e: MouseEvent<HTMLButtonElement>, account: Account): void => {\n        e.preventDefault();\n        history.push({\n            pathname: `/accounts/${account.id}`,\n            state: account,\n        });\n    };\n\n    const handleCreateNewCardClicked = async (e: MouseEvent<HTMLButtonElement>): Promise<void> => {\n        e.preventDefault();\n\n        try {\n            const response: ExecutionResult<CreateCardMutation> = await createCard({\n                variables: {},\n                refetchQueries: [\n                    {\n                        query: CardsDocument,\n                        variables: {},\n                    },\n                ],\n            });\n\n            if (response && response.data) {\n                console.log('Card successfully created!');\n            }\n        } catch (error) {\n            const errorMessage: string = error.message.split(':')[1];\n            console.log(errorMessage);\n        }\n    };\n\n    const renderNoAccountsCard = (): JSX.Element => {\n        return (\n            <>\n                <Grid item xs={12} md={4} lg={4}>\n                    <Paper className={accountCardHeightPaper}>\n                        <NoAccountsCard\n                            onCreateNewAccountClicked={(e: MouseEvent<HTMLButtonElement>) => {\n                                e.preventDefault();\n                                setOpenDialog(true);\n                            }}\n                        />\n                    </Paper>\n                </Grid>\n            </>\n        );\n    };\n\n    const renderNoApolloCard = (): JSX.Element => {\n        return (\n            <>\n                <Grid item xs={12} md={4} lg={4}>\n                    <Paper className={accountCardHeightPaper}>\n                        <NoApolloCard\n                            onCreateNewCardClicked={(e: MouseEvent<HTMLButtonElement>) => {\n                                handleCreateNewCardClicked(e);\n                            }}\n                        />\n                    </Paper>\n                </Grid>\n            </>\n        );\n    };\n\n    const renderChartOptions = (): JSX.Element => {\n        return (\n            <>\n                <ThemeProvider theme={theme}>\n                    <FormControl>\n                        <InputLabel id=\"select-filled-label\">Account</InputLabel>\n                        <Select\n                            labelId=\"select-filled-label\"\n                            id=\"select-filled\"\n                            value={analyticsAccount}\n                            onChange={(event: ChangeEvent<{ value: unknown }>) =>\n                                setAnalyticsAccount(event.target.value as string)\n                            }\n                            label=\"Account\"\n                        >\n                            {currencies.map((currency: string) => {\n                                return (\n                                    <MenuItem key={currency} value={currency}>\n                                        {currency}\n                                    </MenuItem>\n                                );\n                            })}\n                        </Select>\n                    </FormControl>\n                </ThemeProvider>\n            </>\n        );\n    };\n\n    return (\n        <div className={classes.root}>\n            {renderDialog()}\n            <main className={classes.content}>\n                <Container maxWidth=\"lg\" className={classes.container}>\n                    <div\n                        style={{\n                            marginBottom: 12,\n                            display: 'flex',\n                            justifyContent: 'space-between',\n                        }}\n                    >\n                        <div>\n                            <Title title=\"Analytics\" fontSize={24} />\n                        </div>\n                    </div>\n                    {data && data.accounts.length > 0 ? renderChartOptions() : undefined}\n                    <Grid container spacing={3}>\n                        <Grid item xs={12} md={12} lg={12}>\n                            <Paper className={chartPaper}>\n                                <Chart currency={!!analyticsAccount ? analyticsAccount : 'EUR'} />\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Container>\n                <Container maxWidth=\"lg\" className={classes.container}>\n                    <div\n                        style={{\n                            marginBottom: 12,\n                            marginTop: 12,\n                            display: 'flex',\n                            justifyContent: 'space-between',\n                        }}\n                    >\n                        <div>\n                            <Title title=\"Accounts\" fontSize={24} />\n                        </div>\n                        <div\n                            style={{\n                                fontSize: 18,\n                                fontWeight: 'bold',\n                                color: 'rgba(0, 0, 0, 0.3)',\n                            }}\n                        >\n                            Total balance: £{totalBalance}\n                        </div>\n                    </div>\n                    <Grid container spacing={3}>\n                        {data.accounts.length > 0 &&\n                            data.accounts.map((account: Account) => {\n                                let svg: any | string;\n                                let currencyIcon: string = '';\n                                let fullCurrencyText: string = '';\n\n                                switch (account.currency) {\n                                    case Currency.EURO:\n                                        svg = <Euro />;\n                                        currencyIcon = '€';\n                                        fullCurrencyText = 'Euro';\n                                        break;\n                                    case Currency.DOLLAR:\n                                        svg = <Dollar />;\n                                        currencyIcon = '$';\n                                        fullCurrencyText = 'US Dollar';\n                                        break;\n                                    case Currency.POUND:\n                                        svg = <Pound />;\n                                        currencyIcon = '£';\n                                        fullCurrencyText = 'British Pound';\n                                        break;\n                                }\n                                return (\n                                    <Grid key={account.id} item xs={12} md={4} lg={4}>\n                                        <Paper className={accountCardHeightPaper}>\n                                            <AccountsCard\n                                                svg={svg}\n                                                currencyIcon={currencyIcon}\n                                                fullCurrencyText={fullCurrencyText}\n                                                balance={account.balance}\n                                                iban={account.iban}\n                                                onAccountClicked={(\n                                                    e: MouseEvent<HTMLButtonElement>,\n                                                ) => handleAccountClicked(e, account)}\n                                            />\n                                        </Paper>\n                                    </Grid>\n                                );\n                            })}\n                        {data.accounts.length <= 2 && renderNoAccountsCard()}\n                    </Grid>\n                </Container>\n                <Container maxWidth=\"lg\" className={classes.container}>\n                    <div style={{ marginBottom: 12 }}>\n                        <Title title=\"Cards\" fontSize={24} />\n                    </div>\n                    <Grid container spacing={3}>\n                        {cards.data &&\n                            cards.data.cards &&\n                            cards.data.cards.length > 0 &&\n                            cards.data.cards.map(card => {\n                                return (\n                                    <Grid key={card.id} item xs={12} md={4} lg={4}>\n                                        <Paper className={apolloCardPaper}>\n                                            <ApolloCard\n                                                cardNumber={card.cardNumber}\n                                                validThru={\n                                                    new Date(\n                                                        Date.parse(card.expiresIn),\n                                                    ).getMonth() +\n                                                    '/' +\n                                                    new Date(Date.parse(card.expiresIn))\n                                                        .getFullYear()\n                                                        .toString()\n                                                        .substr(-2)\n                                                }\n                                                cvv={card.cvv}\n                                            />\n                                        </Paper>\n                                    </Grid>\n                                );\n                            })}\n                        {cards.data && cards.data.cards.length <= 2 && renderNoApolloCard()}\n                    </Grid>\n                </Container>\n            </main>\n        </div>\n    );\n};\n","import React, { ComponentType, useState } from 'react';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport { Home } from './pages/Home';\nimport { Bye } from './pages/Bye';\nimport { Register } from './pages/Register/Register';\nimport { Login } from './pages/Login/Login';\nimport { getAccessToken } from './utils/accessToken';\nimport { Account } from './pages/Accounts/Account';\nimport { Toolbar } from './components/Toolbar/Toolbar';\nimport { SideDrawer } from './components/SideDrawer/SideDrawer';\nimport { Backdrop } from './components/Backdrop/Backdrop';\nimport { ColorScheme } from './utils/theme';\nimport { Settings } from './pages/Settings/Settings';\nimport { Dashboard } from './pages/Dashboard/Dashboard';\n\ninterface AuthenticatedRouteProps {\n    exact?: boolean;\n    path: string;\n    component: ComponentType<any>;\n}\n\nconst AuthenticatedRoute = ({ component: Component, ...rest }: AuthenticatedRouteProps) => (\n    <Route\n        {...rest}\n        render={props =>\n            getAccessToken() ? <Component {...props} /> : <Redirect to={{ pathname: '/login' }} />\n        }\n    />\n);\n\nconst LoggedInRoute = ({ component: Component, ...rest }: AuthenticatedRouteProps) => (\n    <Route\n        {...rest}\n        render={props =>\n            getAccessToken() ? (\n                <Redirect to={{ pathname: '/dashboard' }} />\n            ) : (\n                <Component {...props} />\n            )\n        }\n    />\n);\n\nexport const Routes: React.FC = () => {\n    const [sideDrawerOpen, setSideDrawerOpen] = useState(false);\n\n    let backdrop: any;\n\n    const drawerToggleClickHandler = () => {\n        setSideDrawerOpen(true);\n    };\n\n    const backdropClickHandler = () => {\n        setSideDrawerOpen(false);\n    };\n\n    if (sideDrawerOpen) {\n        backdrop = <Backdrop click={backdropClickHandler} />;\n    }\n\n    return (\n        <>\n            <Helmet>\n                <style>{`body { background-color: ${ColorScheme.WHITE}; }`}</style>\n            </Helmet>\n            <BrowserRouter>\n                <div style={{ height: '100%' }}>\n                    <Toolbar drawerClickHandler={drawerToggleClickHandler} />\n                    <SideDrawer show={sideDrawerOpen} />\n                    {backdrop}\n                    <main style={{ marginTop: 24 }}>\n                        <Switch>\n                            <Route exact path=\"/\" component={Home} />\n                            <LoggedInRoute exact path=\"/register\" component={Register} />\n                            <LoggedInRoute exact path=\"/login\" component={Login} />\n                            <AuthenticatedRoute exact path=\"/dashboard\" component={Dashboard} />\n                            <AuthenticatedRoute exact path=\"/accounts/:id\" component={Account} />\n                            <AuthenticatedRoute exact path=\"/settings\" component={Settings} />\n                            <Route exact path=\"/bye\" component={Bye} />\n                            <Route\n                                path=\"/\"\n                                render={() => (\n                                    <div\n                                        style={{\n                                            display: 'flex',\n                                            justifyContent: 'center',\n                                            marginTop: 12,\n                                        }}\n                                    >\n                                        404 Not Found\n                                    </div>\n                                )}\n                            />\n                        </Switch>\n                    </main>\n                </div>\n            </BrowserRouter>\n        </>\n    );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink, Observable } from 'apollo-link';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { getAccessToken, setAccessToken } from './utils/accessToken';\nimport { TokenRefreshLink } from 'apollo-link-token-refresh';\nimport jwtDecode from 'jwt-decode';\nimport { App } from './App';\n\nconst cache = new InMemoryCache({});\n\nconst requestLink = new ApolloLink(\n    (operation, forward) =>\n        new Observable(observer => {\n            let handle: any;\n            Promise.resolve(operation)\n                .then(operation => {\n                    const accessToken = getAccessToken();\n                    operation.setContext({\n                        headers: {\n                            authorization: accessToken ? `Bearer ${accessToken}` : '',\n                        },\n                    });\n                })\n                .then(() => {\n                    handle = forward(operation).subscribe({\n                        next: observer.next.bind(observer),\n                        error: observer.error.bind(observer),\n                        complete: observer.complete.bind(observer),\n                    });\n                })\n                .catch(observer.error.bind(observer));\n\n            return () => {\n                if (handle) handle.unsubscribe();\n            };\n        }),\n);\n\nconst client = new ApolloClient({\n    link: ApolloLink.from([\n        new TokenRefreshLink({\n            accessTokenField: 'accessToken',\n            isTokenValidOrUndefined: () => {\n                const token = getAccessToken();\n\n                if (!token) {\n                    return true;\n                }\n\n                try {\n                    const { exp } = jwtDecode(token);\n                    if (Date.now() >= exp * 1000) {\n                        return false;\n                    } else {\n                        return true;\n                    }\n                } catch {\n                    return false;\n                }\n            },\n            fetchAccessToken: () => {\n                return fetch((process.env.REACT_APP_SERVER_URL as string) + '/refresh_token', {\n                    method: 'POST',\n                    credentials: 'include',\n                });\n            },\n            handleFetch: accessToken => {\n                setAccessToken(accessToken);\n            },\n            handleError: err => {\n                console.warn('Your refresh token is invalid. Try to relogin');\n                console.error(err);\n            },\n        }),\n        onError(({ graphQLErrors, networkError }) => {\n            console.log(graphQLErrors);\n            console.log(networkError);\n        }),\n        requestLink,\n        new HttpLink({\n            uri: process.env.REACT_APP_SERVER_URL + '/graphql',\n            credentials: 'include',\n        }),\n    ]),\n    cache,\n});\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <App />\n    </ApolloProvider>,\n    document.getElementById('root'),\n);\n","import React, { useState, useEffect } from 'react';\nimport { Routes } from './Routes';\nimport { setAccessToken } from './utils/accessToken';\nimport { Loading } from './components/Loading/Loading';\nimport Helmet from 'react-helmet';\nimport { ColorScheme } from './utils/theme';\n\nexport const App: React.FC = () => {\n    const [loading, setLoading] = useState<boolean>(true);\n\n    useEffect(() => {\n        fetch((process.env.REACT_APP_SERVER_URL as string) + '/refresh_token', {\n            method: 'POST',\n            credentials: 'include',\n        }).then(async res => {\n            const { accessToken } = await res.json();\n            setAccessToken(accessToken);\n            setLoading(false);\n        });\n    }, []);\n\n    if (loading) {\n        return (\n            <>\n                <Helmet>\n                    <style>{`body { background-color: ${ColorScheme.WHITE}; }`}</style>\n                </Helmet>\n                <div\n                    style={{\n                        position: 'absolute',\n                        top: '50%',\n                        left: '50%',\n                        transform: 'translate(-50%, -50%)',\n                    }}\n                >\n                    <Loading />\n                </div>\n            </>\n        );\n    }\n\n    return (\n        <>\n            <Helmet>\n                <style>{`body { background-color: ${ColorScheme.WHITE}; }`}</style>\n            </Helmet>\n            <Routes />\n        </>\n    );\n};\n"],"sourceRoot":""}